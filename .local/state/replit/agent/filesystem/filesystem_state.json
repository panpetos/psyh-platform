{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive online psychology platform called \"PsychPlatform\" that connects clients with qualified psychologists for remote consultations. The platform is built as a full-stack web application using React for the frontend and Express.js for the backend, with in-memory storage for development. The system supports three user roles: clients seeking psychological help, psychologists providing services, and administrators managing the platform.\n\nThe platform enables clients to search for psychologists, book appointments, and conduct sessions via video, audio, or chat. Psychologists can manage their profiles, schedules, and conduct consultations while receiving payments. Administrators oversee user verification, platform management, and analytics.\n\n## Recent Changes (January 17, 2025)\n- Successfully deployed working MVP with all core features\n- Fixed dialog transparency issues for better user experience\n- Implemented role-based authentication and dashboards\n- Added demo accounts for testing all user types\n- Set up object storage for file uploads\n- Platform is running and fully functional\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nPreferred language: Russian (all communication should be in Russian).\n\n# System Architecture\n\n## Frontend Architecture\nThe client-side application is built with React and TypeScript, utilizing modern UI components from shadcn/ui built on Radix UI primitives. The architecture follows a component-based approach with:\n\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Query (@tanstack/react-query) for server state management and caching\n- **Styling**: Tailwind CSS with CSS variables for theming support\n- **UI Components**: Comprehensive component library with accessible Radix UI primitives\n- **File Upload**: Uppy integration for handling document uploads (psychologist certifications, etc.)\n\nThe frontend is structured with clear separation between pages, components, and utilities, with path aliases configured for clean imports.\n\n## Backend Architecture\nThe server uses Express.js with TypeScript in ES module format, providing a RESTful API architecture:\n\n- **Framework**: Express.js with middleware for JSON parsing, logging, and error handling\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: bcrypt for password hashing with session-based authentication\n- **File Storage**: Google Cloud Storage integration for handling uploaded documents\n- **API Design**: RESTful endpoints organized by feature areas (auth, appointments, reviews, etc.)\n\n## Data Storage Solutions\nThe application uses a PostgreSQL database with a well-structured schema managed through Drizzle ORM:\n\n- **Database**: PostgreSQL hosted on Neon Database\n- **ORM**: Drizzle ORM providing type-safe database operations and migrations\n- **Schema**: Comprehensive relational design supporting users, psychologists, appointments, reviews, messages, and availability\n- **File Storage**: Google Cloud Storage for static assets and document uploads\n\nKey database relationships include user-to-psychologist profiles, appointment bookings with client-psychologist connections, and review systems with proper referential integrity.\n\n## Authentication and Authorization\nThe platform implements role-based access control with three distinct user types:\n\n- **Authentication**: Email/password authentication with bcrypt password hashing\n- **Authorization**: Role-based access control (client, psychologist, admin) enforced at both API and UI levels\n- **Session Management**: Client-side auth state management with persistent sessions\n- **Security**: Password validation, secure routes, and user verification workflows\n\n## Communication Features\nReal-time consultation capabilities are built into the platform:\n\n- **Video Consultations**: Browser-based video calling interface with camera/microphone controls\n- **Audio Sessions**: Audio-only consultation mode for privacy or preference\n- **Chat Messaging**: Text-based communication system for sessions or follow-ups\n- **Session Recording**: Optional session recording capabilities with consent management\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: PostgreSQL hosting service for production database\n- **Drizzle Kit**: Database migration and schema management tools\n\n## Cloud Storage\n- **Google Cloud Storage**: Document storage for psychologist certifications, user avatars, and session-related files\n\n## UI and Component Libraries\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **shadcn/ui**: Pre-built component library built on Radix UI\n- **Lucide React**: Icon library for consistent iconography\n- **Tailwind CSS**: Utility-first CSS framework for styling\n\n## File Upload and Management\n- **Uppy**: Modern file uploader with support for multiple upload sources and cloud storage integration\n- **AWS S3 Uppy Plugin**: Integration for cloud storage uploads\n\n## Development Tools\n- **Vite**: Build tool and development server for frontend\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **React Query**: Server state management and caching\n\n## Authentication and Validation\n- **bcrypt**: Password hashing for secure authentication\n- **Zod**: Schema validation for API inputs and form validation\n- **React Hook Form**: Form state management with validation\n\nThe platform is designed for deployment on Replit with development-specific integrations and error handling overlays for the development environment.","size_bytes":5636},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        // Custom colors from design\n        \"primary-custom\": \"#4A90E2\",\n        \"secondary-custom\": \"#7FB069\",\n        \"accent-custom\": \"#9B59B6\",\n        \"muted-custom\": \"#E8EDF3\",\n        \"text-custom\": \"#2C3E50\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2618},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session middleware\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'your-fallback-secret-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2420},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertPsychologistSchema, insertAppointmentSchema, insertReviewSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport { z } from \"zod\";\n\n// Extend Request type to include session\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n  }\n}\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists\" });\n      }\n      \n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n      \n      // If user is a psychologist, create psychologist profile\n      if (userData.role === 'psychologist') {\n        await storage.createPsychologist({\n          userId: user.id,\n          specialization: \"Не указана\",\n          experience: 0,\n          education: \"Не указано\",\n          description: \"Заполните профиль\",\n          price: \"0.00\",\n          formats: [\"video\"],\n          certifications: []\n        });\n      }\n      \n      // Remove password from response\n      const { password, ...userResponse } = user;\n      res.status(201).json(userResponse);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      const isValid = await bcrypt.compare(password, user.password);\n      if (!isValid) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // Set user session\n      req.session.userId = user.id;\n      \n      const { password: _, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n    \n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    \n    const { password, ...safeUser } = user;\n    res.json(safeUser);\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ error: \"Could not log out\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    const user = await storage.getUser(req.params.id);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    \n    const { password, ...userResponse } = user;\n    res.json(userResponse);\n  });\n\n  // Psychologist routes\n  app.post(\"/api/psychologists\", async (req, res) => {\n    try {\n      const psychologistData = insertPsychologistSchema.parse(req.body);\n      const psychologist = await storage.createPsychologist(psychologistData);\n      res.status(201).json(psychologist);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/psychologists/search\", async (req, res) => {\n    const { specialization, minPrice, maxPrice, formats } = req.query;\n    \n    const filters: any = { isApproved: true };\n    \n    if (specialization) filters.specialization = specialization as string;\n    if (minPrice) filters.minPrice = parseFloat(minPrice as string);\n    if (maxPrice) filters.maxPrice = parseFloat(maxPrice as string);\n    if (formats) {\n      filters.formats = Array.isArray(formats) ? formats : [formats];\n    }\n    \n    const psychologists = await storage.searchPsychologists(filters);\n    res.json(psychologists);\n  });\n\n  app.get(\"/api/psychologists/:id\", async (req, res) => {\n    const psychologist = await storage.getPsychologist(req.params.id);\n    if (!psychologist) {\n      return res.status(404).json({ error: \"Psychologist not found\" });\n    }\n    \n    const user = await storage.getUser(psychologist.userId);\n    res.json({ ...psychologist, user });\n  });\n\n  app.get(\"/api/psychologists/user/:userId\", async (req, res) => {\n    const psychologist = await storage.getPsychologistByUserId(req.params.userId);\n    if (!psychologist) {\n      return res.status(404).json({ error: \"Psychologist profile not found\" });\n    }\n    \n    const user = await storage.getUser(psychologist.userId);\n    res.json({ ...psychologist, user });\n  });\n\n  app.put(\"/api/psychologists/:id\", async (req, res) => {\n    const updates = req.body;\n    const psychologist = await storage.updatePsychologist(req.params.id, updates);\n    \n    if (!psychologist) {\n      return res.status(404).json({ error: \"Psychologist not found\" });\n    }\n    \n    res.json(psychologist);\n  });\n\n  // User profile routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    const user = await storage.getUser(req.params.id);\n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    \n    const { password, ...safeUser } = user;\n    res.json(safeUser);\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    const updates = req.body;\n    const user = await storage.updateUser(req.params.id, updates);\n    \n    if (!user) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    \n    const { password, ...safeUser } = user;\n    res.json(safeUser);\n  });\n\n  // Appointment routes\n  app.post(\"/api/appointments\", async (req, res) => {\n    try {\n      const appointmentData = insertAppointmentSchema.parse(req.body);\n      const appointment = await storage.createAppointment(appointmentData);\n      res.status(201).json(appointment);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/appointments/client/:clientId\", async (req, res) => {\n    const appointments = await storage.getAppointmentsByClient(req.params.clientId);\n    res.json(appointments);\n  });\n\n  app.get(\"/api/appointments/psychologist/:psychologistId\", async (req, res) => {\n    const appointments = await storage.getAppointmentsByPsychologist(req.params.psychologistId);\n    res.json(appointments);\n  });\n\n  app.put(\"/api/appointments/:id\", async (req, res) => {\n    const updates = req.body;\n    const appointment = await storage.updateAppointment(req.params.id, updates);\n    \n    if (!appointment) {\n      return res.status(404).json({ error: \"Appointment not found\" });\n    }\n    \n    res.json(appointment);\n  });\n\n  // Review routes\n  app.post(\"/api/reviews\", async (req, res) => {\n    try {\n      const reviewData = insertReviewSchema.parse(req.body);\n      const review = await storage.createReview(reviewData);\n      res.status(201).json(review);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/reviews/psychologist/:psychologistId\", async (req, res) => {\n    const reviews = await storage.getReviewsByPsychologist(req.params.psychologistId);\n    res.json(reviews);\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/users\", async (req, res) => {\n    const users = await storage.getAllUsers();\n    const safeUsers = users.map(({ password, ...user }) => user);\n    res.json(safeUsers);\n  });\n\n  app.get(\"/api/admin/psychologists/pending\", async (req, res) => {\n    const pending = await storage.getPendingPsychologists();\n    res.json(pending);\n  });\n\n  app.put(\"/api/admin/psychologists/:id/approve\", async (req, res) => {\n    await storage.approvePsychologist(req.params.id);\n    res.json({ success: true });\n  });\n\n  app.delete(\"/api/admin/psychologists/:id/reject\", async (req, res) => {\n    try {\n      await storage.rejectPsychologist(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to reject psychologist\" });\n    }\n  });\n\n  // Stats routes for admin dashboard\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    const users = await storage.getAllUsers();\n    const psychologists = await storage.searchPsychologists({ isApproved: true });\n    \n    res.json({\n      totalUsers: users.length,\n      activePsychologists: psychologists.length,\n      monthlySessions: 3421, // Mock data for demo\n      platformRevenue: \"342150.00\", // Mock data for demo\n    });\n  });\n\n  // User management routes\n  app.put(\"/api/admin/users/:id/freeze\", async (req, res) => {\n    try {\n      await storage.updateUser(req.params.id, { isFrozen: true });\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to freeze user\" });\n    }\n  });\n\n  app.put(\"/api/admin/users/:id/unfreeze\", async (req, res) => {\n    try {\n      await storage.updateUser(req.params.id, { isFrozen: false });\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to unfreeze user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", async (req, res) => {\n    try {\n      await storage.deleteUser(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9954},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Psychologist,\n  type InsertPsychologist,\n  type Appointment,\n  type InsertAppointment,\n  type Review,\n  type InsertReview,\n  type Message,\n  type InsertMessage,\n  type Availability,\n  type InsertAvailability,\n  type PsychologistWithUser,\n  type AppointmentWithDetails,\n  type ReviewWithDetails\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  \n  // Psychologists\n  getPsychologist(id: string): Promise<Psychologist | undefined>;\n  getPsychologistByUserId(userId: string): Promise<Psychologist | undefined>;\n  createPsychologist(psychologist: InsertPsychologist): Promise<Psychologist>;\n  updatePsychologist(id: string, updates: Partial<Psychologist>): Promise<Psychologist | undefined>;\n  searchPsychologists(filters: {\n    specialization?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    formats?: string[];\n    isApproved?: boolean;\n  }): Promise<PsychologistWithUser[]>;\n  \n  // Appointments\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, updates: Partial<Appointment>): Promise<Appointment | undefined>;\n  getAppointmentsByClient(clientId: string): Promise<AppointmentWithDetails[]>;\n  getAppointmentsByPsychologist(psychologistId: string): Promise<AppointmentWithDetails[]>;\n  \n  // Reviews\n  createReview(review: InsertReview): Promise<Review>;\n  getReviewsByPsychologist(psychologistId: string): Promise<ReviewWithDetails[]>;\n  \n  // Messages\n  createMessage(message: InsertMessage): Promise<Message>;\n  getMessagesBetween(user1Id: string, user2Id: string): Promise<Message[]>;\n  \n  // Availability\n  createAvailability(availability: InsertAvailability): Promise<Availability>;\n  getAvailabilityByPsychologist(psychologistId: string): Promise<Availability[]>;\n  \n  // Admin functions\n  getAllUsers(): Promise<User[]>;\n  getPendingPsychologists(): Promise<PsychologistWithUser[]>;\n  approvePsychologist(psychologistId: string): Promise<void>;\n  rejectPsychologist(psychologistId: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private psychologists: Map<string, Psychologist> = new Map();\n  private appointments: Map<string, Appointment> = new Map();\n  private reviews: Map<string, Review> = new Map();\n  private messages: Map<string, Message> = new Map();\n  private availability: Map<string, Availability> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private async seedData() {\n    // Create admin user\n    const adminUser = await this.createUser({\n      email: \"admin@psychplatform.com\",\n      password: await bcrypt.hash(\"admin123\", 10),\n      role: \"admin\",\n      firstName: \"Администратор\",\n      lastName: \"Системы\",\n    });\n\n    // Create sample psychologists\n    const psychologist1User = await this.createUser({\n      email: \"anna.petrova@psychplatform.com\",\n      password: await bcrypt.hash(\"psychologist123\", 10),\n      role: \"psychologist\",\n      firstName: \"Анна\",\n      lastName: \"Петрова\",\n    });\n\n    const psychologist1 = await this.createPsychologist({\n      userId: psychologist1User.id,\n      specialization: \"Семейная терапия\",\n      experience: 8,\n      education: \"МГУ, факультет психологии\",\n      certifications: [\"Семейная терапия\", \"Когнитивно-поведенческая терапия\"],\n      description: \"Специализируюсь на семейных отношениях, конфликтах в паре и детско-родительских отношениях\",\n      price: \"2500.00\",\n      formats: [\"video\", \"audio\", \"chat\"],\n    });\n    \n    // Approve demo psychologists\n    await this.approvePsychologist(psychologist1.id);\n\n    const psychologist2User = await this.createUser({\n      email: \"mikhail.sidorov@psychplatform.com\",\n      password: await bcrypt.hash(\"psychologist123\", 10),\n      role: \"psychologist\",\n      firstName: \"Михаил\",\n      lastName: \"Сидоров\",\n    });\n\n    const psychologist2 = await this.createPsychologist({\n      userId: psychologist2User.id,\n      specialization: \"Когнитивно-поведенческая терапия\",\n      experience: 12,\n      education: \"СПбГУ, клиническая психология\",\n      certifications: [\"КПТ\", \"Работа с тревожными расстройствами\"],\n      description: \"Работаю с тревожными расстройствами, депрессией и паническими атаками\",\n      price: \"3000.00\",\n      formats: [\"video\", \"audio\"],\n    });\n    \n    await this.approvePsychologist(psychologist2.id);\n\n    // Create sample client\n    const clientUser = await this.createUser({\n      email: \"maria.ivanova@example.com\",\n      password: await bcrypt.hash(\"client123\", 10),\n      role: \"client\",\n      firstName: \"Мария\",\n      lastName: \"Иванова\",\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      avatar: insertUser.avatar || null,\n      isVerified: false,\n      isFrozen: false,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    // Also delete related psychologist profile if exists\n    const psychologist = Array.from(this.psychologists.values()).find(p => p.userId === id);\n    if (psychologist) {\n      this.psychologists.delete(psychologist.id);\n    }\n    \n    // Delete user appointments\n    Array.from(this.appointments.values())\n      .filter(apt => apt.clientId === id)\n      .forEach(apt => this.appointments.delete(apt.id));\n    \n    // Delete user messages\n    Array.from(this.messages.values())\n      .filter(msg => msg.senderId === id || msg.receiverId === id)\n      .forEach(msg => this.messages.delete(msg.id));\n    \n    return this.users.delete(id);\n  }\n\n  // Psychologist methods\n  async getPsychologist(id: string): Promise<Psychologist | undefined> {\n    return this.psychologists.get(id);\n  }\n\n  async getPsychologistByUserId(userId: string): Promise<Psychologist | undefined> {\n    return Array.from(this.psychologists.values()).find(p => p.userId === userId);\n  }\n\n  async createPsychologist(insertPsychologist: InsertPsychologist): Promise<Psychologist> {\n    const id = randomUUID();\n    const psychologist: Psychologist = {\n      ...insertPsychologist,\n      id,\n      isApproved: false,\n      rating: \"0\",\n      totalReviews: 0,\n      certifications: Array.isArray(insertPsychologist.certifications) ? insertPsychologist.certifications as string[] : null,\n      formats: Array.isArray(insertPsychologist.formats) ? insertPsychologist.formats as string[] : null,\n    };\n    this.psychologists.set(id, psychologist);\n    return psychologist;\n  }\n\n  async updatePsychologist(id: string, updates: Partial<Psychologist>): Promise<Psychologist | undefined> {\n    const psychologist = this.psychologists.get(id);\n    if (!psychologist) return undefined;\n    \n    const updated = { ...psychologist, ...updates };\n    this.psychologists.set(id, updated);\n    return updated;\n  }\n\n  async searchPsychologists(filters: {\n    specialization?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    formats?: string[];\n    isApproved?: boolean;\n  }): Promise<PsychologistWithUser[]> {\n    let results = Array.from(this.psychologists.values());\n    \n    if (filters.isApproved !== undefined) {\n      results = results.filter(p => p.isApproved === filters.isApproved);\n    }\n    \n    if (filters.specialization) {\n      results = results.filter(p => \n        p.specialization.toLowerCase().includes(filters.specialization!.toLowerCase())\n      );\n    }\n    \n    if (filters.minPrice !== undefined) {\n      results = results.filter(p => parseFloat(p.price) >= filters.minPrice!);\n    }\n    \n    if (filters.maxPrice !== undefined) {\n      results = results.filter(p => parseFloat(p.price) <= filters.maxPrice!);\n    }\n    \n    if (filters.formats && filters.formats.length > 0) {\n      results = results.filter(p => \n        p.formats && Array.isArray(p.formats) && filters.formats!.some(format => p.formats!.includes(format))\n      );\n    }\n    \n    // Add user data\n    return results.map(p => {\n      const user = this.users.get(p.userId)!;\n      return { ...p, user };\n    });\n  }\n\n  // Appointment methods\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    return this.appointments.get(id);\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const id = randomUUID();\n    const appointment: Appointment = {\n      ...insertAppointment,\n      id,\n      notes: insertAppointment.notes || null,\n      status: \"scheduled\",\n      duration: insertAppointment.duration || 50,\n      createdAt: new Date(),\n    };\n    this.appointments.set(id, appointment);\n    return appointment;\n  }\n\n  async updateAppointment(id: string, updates: Partial<Appointment>): Promise<Appointment | undefined> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) return undefined;\n    \n    const updated = { ...appointment, ...updates };\n    this.appointments.set(id, updated);\n    return updated;\n  }\n\n  async getAppointmentsByClient(clientId: string): Promise<AppointmentWithDetails[]> {\n    const appointments = Array.from(this.appointments.values())\n      .filter(a => a.clientId === clientId);\n    \n    return appointments.map(a => {\n      const client = this.users.get(a.clientId)!;\n      const psychologist = this.psychologists.get(a.psychologistId)!;\n      const psychologistUser = this.users.get(psychologist.userId)!;\n      \n      return {\n        ...a,\n        client,\n        psychologist: { ...psychologist, user: psychologistUser }\n      };\n    });\n  }\n\n  async getAppointmentsByPsychologist(psychologistId: string): Promise<AppointmentWithDetails[]> {\n    const appointments = Array.from(this.appointments.values())\n      .filter(a => a.psychologistId === psychologistId);\n    \n    return appointments.map(a => {\n      const client = this.users.get(a.clientId)!;\n      const psychologist = this.psychologists.get(a.psychologistId)!;\n      const psychologistUser = this.users.get(psychologist.userId)!;\n      \n      return {\n        ...a,\n        client,\n        psychologist: { ...psychologist, user: psychologistUser }\n      };\n    });\n  }\n\n  // Review methods\n  async createReview(insertReview: InsertReview): Promise<Review> {\n    const id = randomUUID();\n    const review: Review = {\n      ...insertReview,\n      id,\n      comment: insertReview.comment || null,\n      isModerated: false,\n      createdAt: new Date(),\n    };\n    this.reviews.set(id, review);\n    \n    // Update psychologist rating\n    const psychologist = this.psychologists.get(insertReview.psychologistId);\n    if (psychologist) {\n      const reviews = Array.from(this.reviews.values())\n        .filter(r => r.psychologistId === insertReview.psychologistId);\n      \n      const avgRating = reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length;\n      \n      await this.updatePsychologist(insertReview.psychologistId, {\n        rating: avgRating.toFixed(1),\n        totalReviews: reviews.length,\n      });\n    }\n    \n    return review;\n  }\n\n  async getReviewsByPsychologist(psychologistId: string): Promise<ReviewWithDetails[]> {\n    const reviews = Array.from(this.reviews.values())\n      .filter(r => r.psychologistId === psychologistId);\n    \n    return reviews.map(r => {\n      const client = this.users.get(r.clientId)!;\n      const psychologist = this.psychologists.get(r.psychologistId)!;\n      const psychologistUser = this.users.get(psychologist.userId)!;\n      \n      return {\n        ...r,\n        client,\n        psychologist: { ...psychologist, user: psychologistUser }\n      };\n    });\n  }\n\n  // Message methods\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = {\n      ...insertMessage,\n      id,\n      isRead: false,\n      createdAt: new Date(),\n    };\n    this.messages.set(id, message);\n    return message;\n  }\n\n  async getMessagesBetween(user1Id: string, user2Id: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter(m => \n        (m.senderId === user1Id && m.receiverId === user2Id) ||\n        (m.senderId === user2Id && m.receiverId === user1Id)\n      )\n      .sort((a, b) => (a.createdAt?.getTime() || 0) - (b.createdAt?.getTime() || 0));\n  }\n\n  // Availability methods\n  async createAvailability(insertAvailability: InsertAvailability): Promise<Availability> {\n    const id = randomUUID();\n    const availability: Availability = {\n      ...insertAvailability,\n      id,\n      isActive: true,\n    };\n    this.availability.set(id, availability);\n    return availability;\n  }\n\n  async getAvailabilityByPsychologist(psychologistId: string): Promise<Availability[]> {\n    return Array.from(this.availability.values())\n      .filter(a => a.psychologistId === psychologistId && a.isActive);\n  }\n\n  // Admin methods\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getPendingPsychologists(): Promise<PsychologistWithUser[]> {\n    const pending = Array.from(this.psychologists.values())\n      .filter(p => !p.isApproved);\n    \n    return pending.map(p => {\n      const user = this.users.get(p.userId)!;\n      return { ...p, user };\n    });\n  }\n\n  async approvePsychologist(psychologistId: string): Promise<void> {\n    await this.updatePsychologist(psychologistId, { isApproved: true });\n  }\n\n  async rejectPsychologist(psychologistId: string): Promise<void> {\n    const psychologist = this.psychologists.get(psychologistId);\n    if (psychologist) {\n      // Delete the psychologist profile\n      this.psychologists.delete(psychologistId);\n      \n      // Also delete the user account associated with this psychologist\n      await this.deleteUser(psychologist.userId);\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15074},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\", { enum: [\"client\", \"psychologist\", \"admin\"] }).notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  avatar: text(\"avatar\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  isFrozen: boolean(\"is_frozen\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const psychologists = pgTable(\"psychologists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  specialization: text(\"specialization\").notNull(),\n  experience: integer(\"experience\").notNull(), // years of experience\n  education: text(\"education\").notNull(),\n  certifications: jsonb(\"certifications\").$type<string[]>().default([]),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  formats: jsonb(\"formats\").$type<string[]>().default([]), // ['video', 'audio', 'chat']\n  isApproved: boolean(\"is_approved\").default(false),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  totalReviews: integer(\"total_reviews\").default(0),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").references(() => users.id).notNull(),\n  psychologistId: varchar(\"psychologist_id\").references(() => psychologists.id).notNull(),\n  dateTime: timestamp(\"date_time\").notNull(),\n  duration: integer(\"duration\").default(50), // minutes\n  format: text(\"format\", { enum: [\"video\", \"audio\", \"chat\"] }).notNull(),\n  status: text(\"status\", { enum: [\"scheduled\", \"in_progress\", \"completed\", \"cancelled\"] }).default(\"scheduled\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id).notNull(),\n  clientId: varchar(\"client_id\").references(() => users.id).notNull(),\n  psychologistId: varchar(\"psychologist_id\").references(() => psychologists.id).notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  comment: text(\"comment\"),\n  isModerated: boolean(\"is_moderated\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").references(() => users.id).notNull(),\n  receiverId: varchar(\"receiver_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const availability = pgTable(\"availability\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  psychologistId: varchar(\"psychologist_id\").references(() => psychologists.id).notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0-6 (Sunday-Saturday)\n  startTime: text(\"start_time\").notNull(), // HH:MM format\n  endTime: text(\"end_time\").notNull(), // HH:MM format\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertPsychologistSchema = createInsertSchema(psychologists).omit({ id: true, isApproved: true, rating: true, totalReviews: true });\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({ id: true, createdAt: true });\nexport const insertReviewSchema = createInsertSchema(reviews).omit({ id: true, isModerated: true, createdAt: true });\nexport const insertMessageSchema = createInsertSchema(messages).omit({ id: true, isRead: true, createdAt: true });\nexport const insertAvailabilitySchema = createInsertSchema(availability).omit({ id: true });\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertPsychologist = z.infer<typeof insertPsychologistSchema>;\nexport type Psychologist = typeof psychologists.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertAvailability = z.infer<typeof insertAvailabilitySchema>;\nexport type Availability = typeof availability.$inferSelect;\n\n// Combined types\nexport type PsychologistWithUser = Psychologist & { user: User };\nexport type AppointmentWithDetails = Appointment & { \n  client: User; \n  psychologist: PsychologistWithUser;\n};\nexport type ReviewWithDetails = Review & {\n  client: User;\n  psychologist: PsychologistWithUser;\n};\n","size_bytes":5495},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState, useEffect } from \"react\";\nimport { authService } from \"./lib/auth\";\nimport { AuthUser } from \"./types\";\n\nimport Navigation from \"./components/navigation\";\nimport Landing from \"./pages/landing\";\nimport PsychologistSearch from \"./pages/psychologist-search\";\nimport Booking from \"./pages/booking\";\nimport ClientDashboard from \"./pages/client-dashboard\";\nimport PsychologistDashboard from \"./pages/psychologist-dashboard\";\nimport AdminDashboard from \"./pages/admin-dashboard\";\nimport VideoConsultation from \"./pages/video-consultation\";\nimport EditProfile from \"./pages/edit-profile\";\nimport LoginModal from \"./components/auth/login-modal\";\nimport RegisterModal from \"./components/auth/register-modal\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  const [showRegisterModal, setShowRegisterModal] = useState(false);\n\n  useEffect(() => {\n    return authService.onAuthChange(setUser);\n  }, []);\n\n  const handleShowLogin = () => {\n    setShowRegisterModal(false);\n    setShowLoginModal(true);\n  };\n\n  const handleShowRegister = () => {\n    setShowLoginModal(false);\n    setShowRegisterModal(true);\n  };\n\n  const handleCloseModals = () => {\n    setShowLoginModal(false);\n    setShowRegisterModal(false);\n  };\n\n  return (\n    <>\n      <Navigation \n        user={user} \n        onShowLogin={handleShowLogin}\n        onShowRegister={handleShowRegister}\n      />\n      \n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route path=\"/search\" component={PsychologistSearch} />\n        <Route path=\"/booking/:psychologistId\" component={Booking} />\n        <Route path=\"/consultation/:appointmentId\" component={VideoConsultation} />\n        <Route path=\"/edit-profile\" component={EditProfile} />\n        \n        {/* Protected routes based on user role */}\n        {user?.role === 'client' && (\n          <Route path=\"/dashboard\" component={ClientDashboard} />\n        )}\n        {user?.role === 'psychologist' && (\n          <Route path=\"/dashboard\" component={PsychologistDashboard} />\n        )}\n        {user?.role === 'admin' && (\n          <Route path=\"/admin\" component={AdminDashboard} />\n        )}\n        \n        <Route component={NotFound} />\n      </Switch>\n\n      <LoginModal \n        open={showLoginModal} \n        onClose={handleCloseModals}\n        onShowRegister={handleShowRegister}\n      />\n      \n      <RegisterModal \n        open={showRegisterModal} \n        onClose={handleCloseModals}\n        onShowLogin={handleShowLogin}\n      />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3117},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(207 14% 16%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(207 14% 16%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(207 14% 16%);\n  --primary: hsl(208 100% 59%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(115 41% 58%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(212 25% 93%);\n  --muted-foreground: hsl(207 14% 16%);\n  --accent: hsl(278 52% 59%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 40% 95%);\n  --input: hsl(210 40% 95%);\n  --ring: hsl(208 100% 59%);\n  --font-sans: 'Inter', sans-serif;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(207 14% 16%);\n  --foreground: hsl(0 0% 100%);\n  --card: hsl(210 11% 11%);\n  --card-foreground: hsl(0 0% 100%);\n  --popover: hsl(210 11% 11%);\n  --popover-foreground: hsl(0 0% 100%);\n  --primary: hsl(208 100% 59%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(115 41% 58%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 11% 15%);\n  --muted-foreground: hsl(210 40% 70%);\n  --accent: hsl(278 52% 59%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 11% 15%);\n  --input: hsl(210 11% 15%);\n  --ring: hsl(208 100% 59%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n\n  /* Custom colors from design */\n  .text-primary-custom {\n    color: #4A90E2;\n  }\n\n  .text-secondary-custom {\n    color: #7FB069;\n  }\n\n  .text-accent-custom {\n    color: #9B59B6;\n  }\n\n  .text-muted-custom {\n    color: #2C3E50;\n  }\n\n  .bg-primary-custom {\n    background-color: #4A90E2;\n  }\n\n  .bg-secondary-custom {\n    background-color: #7FB069;\n  }\n\n  .bg-accent-custom {\n    background-color: #9B59B6;\n  }\n\n  .bg-muted-custom {\n    background-color: #E8EDF3;\n  }\n\n  .border-primary-custom {\n    border-color: #4A90E2;\n  }\n\n  .hover\\:bg-primary-custom:hover {\n    background-color: #3A7BD5;\n  }\n\n  .hover\\:bg-secondary-custom:hover {\n    background-color: #6FA054;\n  }\n\n  /* Gradient backgrounds from design */\n  .bg-gradient-hero {\n    background: linear-gradient(to right, #f0f8ff, #f0fff0);\n  }\n}\n","size_bytes":2375},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/appointment-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Calendar, Clock, Video, Phone, MessageSquare, MoreVertical } from \"lucide-react\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { AppointmentWithDetails } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface AppointmentCardProps {\n  appointment: AppointmentWithDetails;\n  userRole: 'client' | 'psychologist';\n  onCancel?: (appointmentId: string) => void;\n  onReschedule?: (appointmentId: string) => void;\n  onStartSession?: (appointmentId: string) => void;\n}\n\nexport default function AppointmentCard({ \n  appointment, \n  userRole, \n  onCancel, \n  onReschedule, \n  onStartSession \n}: AppointmentCardProps) {\n  const formatIcons = {\n    video: Video,\n    audio: Phone,\n    chat: MessageSquare,\n  };\n\n  const statusStyles = {\n    scheduled: \"bg-blue-50 border-primary-custom text-primary-custom\",\n    in_progress: \"bg-green-50 border-green-500 text-green-600\",\n    completed: \"bg-gray-50 border-gray-300 text-gray-600\",\n    cancelled: \"bg-red-50 border-red-300 text-red-600\",\n  };\n\n  const statusLabels = {\n    scheduled: \"Запланировано\",\n    in_progress: \"В процессе\",\n    completed: \"Завершено\",\n    cancelled: \"Отменено\",\n  };\n\n  const Icon = formatIcons[appointment.format];\n  const appointmentDate = new Date(appointment.dateTime);\n  const now = new Date();\n  const isUpcoming = appointmentDate > now && appointment.status === 'scheduled';\n  const canStart = appointmentDate <= now && appointment.status === 'scheduled';\n  \n  const otherUser = userRole === 'client' \n    ? appointment.psychologist.user \n    : appointment.client;\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName[0]}${lastName[0]}`.toUpperCase();\n  };\n\n  const getTimeUntil = () => {\n    const diff = appointmentDate.getTime() - now.getTime();\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    \n    if (hours > 0) {\n      return `через ${hours} ч ${minutes} мин`;\n    } else if (minutes > 0) {\n      return `через ${minutes} мин`;\n    } else {\n      return \"сейчас\";\n    }\n  };\n\n  return (\n    <Card \n      className={`transition-all ${\n        isUpcoming ? 'border-primary-custom bg-blue-50' : 'border-gray-200'\n      }`}\n      data-testid={`appointment-card-${appointment.id}`}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-start space-x-4 flex-1\">\n            <Avatar className=\"w-12 h-12\">\n              <AvatarImage src={otherUser.avatar} />\n              <AvatarFallback className=\"bg-primary-custom text-white\">\n                {getInitials(otherUser.firstName, otherUser.lastName)}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold text-text-custom\">\n                {userRole === 'client' ? 'Др. ' : ''}{otherUser.firstName} {otherUser.lastName}\n              </h3>\n              {userRole === 'client' && (\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  {appointment.psychologist.specialization}\n                </p>\n              )}\n              \n              <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-2\">\n                <div className=\"flex items-center space-x-1\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>{appointmentDate.toLocaleDateString('ru-RU')}</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Clock className=\"h-4 w-4\" />\n                  <span>{appointmentDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Icon className=\"h-4 w-4\" />\n                  <span className=\"capitalize\">{appointment.format}</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Badge variant=\"outline\" className={statusStyles[appointment.status]}>\n                  {statusLabels[appointment.status]}\n                </Badge>\n                <span className=\"text-sm font-medium text-primary-custom\">\n                  ₽{parseFloat(appointment.price).toLocaleString()}\n                </span>\n              </div>\n\n              {isUpcoming && (\n                <div className=\"flex items-center text-sm text-primary-custom\">\n                  <Clock className=\"h-4 w-4 mr-1\" />\n                  <span>Начинается {getTimeUntil()}</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {canStart && (\n              <Button\n                size=\"sm\"\n                className=\"bg-green-600 text-white hover:bg-green-700\"\n                onClick={() => onStartSession?.(appointment.id)}\n                data-testid={`button-start-session-${appointment.id}`}\n              >\n                {userRole === 'psychologist' ? 'Начать' : 'Присоединиться'}\n              </Button>\n            )}\n            \n            {isUpcoming && !canStart && (\n              <Link href={`/consultation/${appointment.id}`}>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"border-primary-custom text-primary-custom hover:bg-primary-custom hover:text-white\"\n                  data-testid={`button-prepare-session-${appointment.id}`}\n                >\n                  Подготовиться\n                </Button>\n              </Link>\n            )}\n\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  data-testid={`button-options-${appointment.id}`}\n                >\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                {appointment.status === 'scheduled' && (\n                  <>\n                    <DropdownMenuItem \n                      onClick={() => onReschedule?.(appointment.id)}\n                      data-testid={`menu-reschedule-${appointment.id}`}\n                    >\n                      Перенести время\n                    </DropdownMenuItem>\n                    <DropdownMenuItem \n                      onClick={() => onCancel?.(appointment.id)}\n                      className=\"text-red-600\"\n                      data-testid={`menu-cancel-${appointment.id}`}\n                    >\n                      Отменить\n                    </DropdownMenuItem>\n                  </>\n                )}\n                {appointment.status === 'completed' && userRole === 'client' && (\n                  <DropdownMenuItem data-testid={`menu-review-${appointment.id}`}>\n                    Оставить отзыв\n                  </DropdownMenuItem>\n                )}\n                <DropdownMenuItem data-testid={`menu-details-${appointment.id}`}>\n                  Подробности\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n\n        {appointment.notes && (\n          <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n            <p className=\"text-sm text-gray-700\">\n              <strong>Заметки:</strong> {appointment.notes}\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8069},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Menu, LogOut, User, Settings } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { AuthUser } from \"@/types\";\nimport { authService } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface NavigationProps {\n  user: AuthUser | null;\n  onShowLogin: () => void;\n  onShowRegister: () => void;\n}\n\nexport default function Navigation({ user, onShowLogin, onShowRegister }: NavigationProps) {\n  const [location, navigate] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    authService.logout();\n    navigate(\"/\");\n    toast({\n      title: \"Выход выполнен\",\n      description: \"Вы успешно вышли из аккаунта\",\n    });\n  };\n\n  const getDashboardLink = () => {\n    if (user?.role === 'admin') return '/admin';\n    return '/dashboard';\n  };\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <nav className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\">\n              <h1 className=\"text-2xl font-bold text-primary-custom cursor-pointer\" data-testid=\"logo\">\n                PsychPlatform\n              </h1>\n            </Link>\n            \n            <div className=\"hidden md:block ml-10\">\n              <div className=\"flex items-baseline space-x-4\">\n                <Link href=\"/\">\n                  <a \n                    className={`px-3 py-2 text-sm font-medium transition-colors ${\n                      isActive('/') \n                        ? 'text-primary-custom' \n                        : 'text-text-custom hover:text-primary-custom'\n                    }`}\n                    data-testid=\"nav-home\"\n                  >\n                    Главная\n                  </a>\n                </Link>\n                <Link href=\"/search\">\n                  <a \n                    className={`px-3 py-2 text-sm font-medium transition-colors ${\n                      isActive('/search') \n                        ? 'text-primary-custom' \n                        : 'text-text-custom hover:text-primary-custom'\n                    }`}\n                    data-testid=\"nav-specialists\"\n                  >\n                    Специалисты\n                  </a>\n                </Link>\n                <a \n                  href=\"#how-it-works\" \n                  className=\"text-text-custom hover:text-primary-custom px-3 py-2 text-sm font-medium transition-colors\"\n                  data-testid=\"nav-how-it-works\"\n                >\n                  Как это работает\n                </a>\n                <a \n                  href=\"#about\" \n                  className=\"text-text-custom hover:text-primary-custom px-3 py-2 text-sm font-medium transition-colors\"\n                  data-testid=\"nav-about\"\n                >\n                  О нас\n                </a>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"hidden md:flex items-center space-x-4\">\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"user-menu\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user.avatar} />\n                      <AvatarFallback>\n                        {user.firstName[0]}{user.lastName[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-sm font-medium\">\n                      {user.firstName} {user.lastName}\n                    </span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <Link href={getDashboardLink()}>\n                    <DropdownMenuItem data-testid=\"menu-dashboard\">\n                      <User className=\"mr-2 h-4 w-4\" />\n                      Личный кабинет\n                    </DropdownMenuItem>\n                  </Link>\n                  <DropdownMenuItem data-testid=\"menu-settings\">\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    Настройки\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-logout\">\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Выйти\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <>\n                <Button \n                  variant=\"ghost\" \n                  onClick={onShowLogin}\n                  data-testid=\"button-login\"\n                >\n                  Войти\n                </Button>\n                <Button \n                  className=\"bg-primary-custom text-white hover:bg-primary-custom/90\"\n                  onClick={onShowRegister}\n                  data-testid=\"button-register\"\n                >\n                  Регистрация\n                </Button>\n              </>\n            )}\n          </div>\n\n          <div className=\"md:hidden\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"mobile-menu-toggle\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile menu */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-gray-200\">\n            <div className=\"flex flex-col space-y-2\">\n              <Link href=\"/\">\n                <a className=\"block px-3 py-2 text-sm font-medium text-text-custom hover:text-primary-custom\">\n                  Главная\n                </a>\n              </Link>\n              <Link href=\"/search\">\n                <a className=\"block px-3 py-2 text-sm font-medium text-text-custom hover:text-primary-custom\">\n                  Специалисты\n                </a>\n              </Link>\n              <a href=\"#how-it-works\" className=\"block px-3 py-2 text-sm font-medium text-text-custom hover:text-primary-custom\">\n                Как это работает\n              </a>\n              <a href=\"#about\" className=\"block px-3 py-2 text-sm font-medium text-text-custom hover:text-primary-custom\">\n                О нас\n              </a>\n              \n              {user ? (\n                <div className=\"pt-4 border-t border-gray-200\">\n                  <Link href={getDashboardLink()}>\n                    <a className=\"block px-3 py-2 text-sm font-medium text-text-custom hover:text-primary-custom\">\n                      Личный кабинет\n                    </a>\n                  </Link>\n                  <button \n                    onClick={handleLogout}\n                    className=\"block w-full text-left px-3 py-2 text-sm font-medium text-text-custom hover:text-primary-custom\"\n                  >\n                    Выйти\n                  </button>\n                </div>\n              ) : (\n                <div className=\"pt-4 border-t border-gray-200 space-y-2\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start\"\n                    onClick={onShowLogin}\n                  >\n                    Войти\n                  </Button>\n                  <Button \n                    className=\"w-full bg-primary-custom text-white hover:bg-primary-custom/90\"\n                    onClick={onShowRegister}\n                  >\n                    Регистрация\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":8348},"client/src/components/psychologist-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Star, Video, Phone, MessageSquare } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface PsychologistCardProps {\n  psychologist: {\n    id: string;\n    specialization: string;\n    experience: number;\n    description: string;\n    price: string;\n    formats: string[];\n    rating: string;\n    totalReviews: number;\n    user: {\n      firstName: string;\n      lastName: string;\n      avatar?: string;\n    };\n  };\n}\n\nexport default function PsychologistCard({ psychologist }: PsychologistCardProps) {\n  const formatIcons = {\n    video: Video,\n    audio: Phone,\n    chat: MessageSquare,\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName[0]}${lastName[0]}`.toUpperCase();\n  };\n\n  const renderStars = (rating: string) => {\n    const numRating = parseFloat(rating);\n    const fullStars = Math.floor(numRating);\n    const hasHalfStar = numRating % 1 !== 0;\n    \n    return (\n      <div className=\"flex items-center\">\n        {[...Array(5)].map((_, i) => (\n          <Star\n            key={i}\n            className={`h-4 w-4 ${\n              i < fullStars \n                ? 'text-yellow-400 fill-yellow-400' \n                : i === fullStars && hasHalfStar\n                ? 'text-yellow-400 fill-yellow-400/50'\n                : 'text-gray-300'\n            }`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\" data-testid={`psychologist-card-${psychologist.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start space-x-4\">\n          <Avatar className=\"w-16 h-16\">\n            <AvatarImage src={psychologist.user.avatar} />\n            <AvatarFallback className=\"bg-primary-custom text-white\">\n              {getInitials(psychologist.user.firstName, psychologist.user.lastName)}\n            </AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"text-lg font-semibold text-text-custom mb-1\">\n              Др. {psychologist.user.firstName} {psychologist.user.lastName}\n            </h3>\n            <p className=\"text-sm text-gray-600 mb-2\">{psychologist.specialization}</p>\n            \n            <div className=\"flex items-center mb-2\">\n              {renderStars(psychologist.rating)}\n              <span className=\"text-sm text-gray-600 ml-2\">\n                {psychologist.rating} ({psychologist.totalReviews} отзывов)\n              </span>\n            </div>\n            \n            <p className=\"text-sm text-gray-700 mb-3\">\n              {psychologist.experience} лет опыта\n            </p>\n            \n            <p className=\"text-sm text-gray-600 line-clamp-2 mb-4\">\n              {psychologist.description}\n            </p>\n            \n            {/* Format badges */}\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              {psychologist.formats.map((format) => {\n                const Icon = formatIcons[format as keyof typeof formatIcons];\n                return (\n                  <Badge key={format} variant=\"secondary\" className=\"flex items-center space-x-1\">\n                    <Icon className=\"h-3 w-3\" />\n                    <span className=\"capitalize\">{format}</span>\n                  </Badge>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between mt-4\">\n          <span className=\"text-lg font-semibold text-primary-custom\">\n            ₽{parseFloat(psychologist.price).toLocaleString()}/сессия\n          </span>\n          <Link href={`/booking/${psychologist.id}`}>\n            <Button \n              className=\"bg-primary-custom text-white hover:bg-primary-custom/90\"\n              data-testid={`button-book-${psychologist.id}`}\n            >\n              Записаться\n            </Button>\n          </Link>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4198},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { AuthUser } from \"@/types\";\n\n// Simple auth state management - in a real app you'd use a proper auth library\nlet currentUser: AuthUser | null = null;\nlet authListeners: ((user: AuthUser | null) => void)[] = [];\n\nexport const authService = {\n  getCurrentUser(): AuthUser | null {\n    return currentUser;\n  },\n\n  setCurrentUser(user: AuthUser | null) {\n    currentUser = user;\n    authListeners.forEach(listener => listener(user));\n  },\n\n  onAuthChange(listener: (user: AuthUser | null) => void) {\n    authListeners.push(listener);\n    return () => {\n      authListeners = authListeners.filter(l => l !== listener);\n    };\n  },\n\n  async login(email: string, password: string): Promise<AuthUser> {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Login failed');\n    }\n\n    const user = await response.json();\n    this.setCurrentUser(user);\n    return user;\n  },\n\n  async register(userData: {\n    email: string;\n    password: string;\n    role: 'client' | 'psychologist';\n    firstName: string;\n    lastName: string;\n  }): Promise<AuthUser> {\n    const response = await fetch('/api/auth/register', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Registration failed');\n    }\n\n    const user = await response.json();\n    this.setCurrentUser(user);\n    return user;\n  },\n\n  logout() {\n    this.setCurrentUser(null);\n  },\n};\n","size_bytes":1754},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  BarChart3, \n  Users, \n  UserCheck, \n  CreditCard, \n  FileText, \n  TrendingUp, \n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  MoreVertical,\n  UserX,\n  Trash2,\n  ShieldCheck,\n  Settings\n} from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype TabType = 'overview' | 'users' | 'approvals' | 'payments' | 'reports';\n\nexport default function AdminDashboard() {\n  const [activeTab, setActiveTab] = useState<TabType>('overview');\n  const [, navigate] = useLocation();\n  const currentUser = authService.getCurrentUser();\n  const { toast } = useToast();\n\n  const { data: stats = {} } = useQuery({\n    queryKey: ['/api/admin/stats'],\n    enabled: !!currentUser && currentUser.role === 'admin',\n  });\n\n  const { data: users = [], refetch: refetchUsers } = useQuery({\n    queryKey: ['/api/admin/users'],\n    enabled: !!currentUser && currentUser.role === 'admin' && activeTab === 'users',\n  });\n\n  const { data: pendingPsychologists = [], refetch: refetchPending } = useQuery({\n    queryKey: ['/api/admin/psychologists/pending'],\n    enabled: !!currentUser && currentUser.role === 'admin' && activeTab === 'approvals',\n  });\n\n  if (!currentUser || currentUser.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-4\">Доступ запрещен</h2>\n            <p className=\"text-gray-600\">\n              Эта страница доступна только для администраторов\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleApprovePsychologist = async (psychologistId: string) => {\n    try {\n      const response = await fetch(`/api/admin/psychologists/${psychologistId}/approve`, {\n        method: 'PUT',\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Психолог одобрен\",\n          description: \"Специалист успешно верифицирован и может принимать клиентов\",\n        });\n        // Refresh both pending list and users list\n        refetchPending();\n        refetchUsers();\n        // Invalidate psychologist search cache so approved psychologists appear in search\n        queryClient.invalidateQueries({ queryKey: ['/api/psychologists/search'] });\n      } else {\n        throw new Error('Failed to approve');\n      }\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось одобрить специалиста\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRejectPsychologist = async (psychologistId: string, psychologistName: string) => {\n    if (!confirm(`Вы уверены, что хотите отклонить заявку психолога ${psychologistName}? Профиль будет удален.`)) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/admin/psychologists/${psychologistId}/reject`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Успешно\",\n          description: `Заявка психолога ${psychologistName} отклонена`,\n        });\n        refetchPending();\n        refetchUsers();\n      } else {\n        throw new Error('Не удалось отклонить заявку');\n      }\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: `Не удалось отклонить заявку: ${error}`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUserAction = async (userId: string, action: string, user: any) => {\n    try {\n      let response;\n      let successMessage = \"\";\n      \n      switch (action) {\n        case 'freeze':\n          response = await fetch(`/api/admin/users/${userId}/freeze`, {\n            method: 'PUT',\n          });\n          successMessage = `Пользователь ${user.firstName} ${user.lastName} заморожен`;\n          break;\n        case 'unfreeze':\n          response = await fetch(`/api/admin/users/${userId}/unfreeze`, {\n            method: 'PUT',\n          });\n          successMessage = `Пользователь ${user.firstName} ${user.lastName} разморожен`;\n          break;\n        case 'delete':\n          if (!confirm(`Вы уверены, что хотите удалить пользователя ${user.firstName} ${user.lastName}? Это действие нельзя отменить.`)) {\n            return;\n          }\n          response = await fetch(`/api/admin/users/${userId}`, {\n            method: 'DELETE',\n          });\n          successMessage = `Пользователь ${user.firstName} ${user.lastName} удален`;\n          break;\n        case 'approve':\n          // For psychologists - find their psychologist profile and approve it\n          const psychologist = await fetch(`/api/psychologists/user/${userId}`);\n          if (psychologist.ok) {\n            const psychData = await psychologist.json();\n            await handleApprovePsychologist(psychData.id);\n            return; // handleApprovePsychologist already shows success message\n          } else {\n            throw new Error('Профиль психолога не найден');\n          }\n        default:\n          break;\n      }\n      \n      if (response && response.ok) {\n        toast({\n          title: \"Успешно\",\n          description: successMessage,\n        });\n        refetchUsers();\n        if (action === 'approve') {\n          queryClient.invalidateQueries({ queryKey: ['/api/psychologists/search'] });\n        }\n      } else {\n        throw new Error('Операция не выполнена');\n      }\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: `Не удалось выполнить операцию: ${error}`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const tabs = [\n    { id: 'overview', label: 'Обзор', icon: BarChart3 },\n    { id: 'users', label: 'Пользователи', icon: Users },\n    { id: 'approvals', label: 'Верификация', icon: UserCheck },\n    { id: 'payments', label: 'Платежи', icon: CreditCard },\n    { id: 'reports', label: 'Отчеты', icon: FileText },\n  ] as const;\n\n  const recentActivities = [\n    {\n      id: 1,\n      type: 'user_registration',\n      message: 'Новая регистрация психолога',\n      details: 'Др. Елена Смирнова зарегистрировалась на платформе',\n      time: '2 мин назад',\n      icon: CheckCircle,\n      color: 'text-green-600 bg-green-100',\n    },\n    {\n      id: 2,\n      type: 'appointment',\n      message: 'Новая запись на сессию',\n      details: 'Клиент записался к Др. Петровой на завтра',\n      time: '15 мин назад',\n      icon: Clock,\n      color: 'text-blue-600 bg-blue-100',\n    },\n    {\n      id: 3,\n      type: 'moderation',\n      message: 'Требуется модерация',\n      details: 'Отзыв клиента ожидает проверки',\n      time: '1 час назад',\n      icon: AlertTriangle,\n      color: 'text-yellow-600 bg-yellow-100',\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-text-custom\">Панель администратора</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Управление платформой психологической помощи\n          </p>\n        </div>\n\n        {/* Admin Navigation */}\n        <Card className=\"mb-8\">\n          <nav className=\"flex space-x-8 px-6\" data-testid=\"admin-nav\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`py-4 font-medium transition-colors flex items-center space-x-2 ${\n                    activeTab === tab.id\n                      ? 'text-primary-custom border-b-2 border-primary-custom'\n                      : 'text-gray-500 hover:text-primary-custom'\n                  }`}\n                  data-testid={`tab-${tab.id}`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span>{tab.label}</span>\n                </button>\n              );\n            })}\n          </nav>\n        </Card>\n\n        {/* Overview Tab */}\n        {activeTab === 'overview' && (\n          <div>\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Всего пользователей</p>\n                      <p className=\"text-2xl font-bold text-text-custom\" data-testid=\"stat-total-users\">\n                        {(stats as any)?.totalUsers || 0}\n                      </p>\n                    </div>\n                    <div className=\"bg-primary-custom text-white p-3 rounded-lg\">\n                      <Users className=\"h-6 w-6\" />\n                    </div>\n                  </div>\n                  <div className=\"mt-2 flex items-center text-sm\">\n                    <TrendingUp className=\"h-4 w-4 text-green-600 mr-1\" />\n                    <span className=\"text-green-600\">+12%</span>\n                    <span className=\"text-gray-600 ml-2\">за месяц</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Активных психологов</p>\n                      <p className=\"text-2xl font-bold text-text-custom\" data-testid=\"stat-active-psychologists\">\n                        {(stats as any)?.activePsychologists || 0}\n                      </p>\n                    </div>\n                    <div className=\"bg-secondary-custom text-white p-3 rounded-lg\">\n                      <UserCheck className=\"h-6 w-6\" />\n                    </div>\n                  </div>\n                  <div className=\"mt-2 flex items-center text-sm\">\n                    <TrendingUp className=\"h-4 w-4 text-green-600 mr-1\" />\n                    <span className=\"text-green-600\">+8%</span>\n                    <span className=\"text-gray-600 ml-2\">за месяц</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Сессий за месяц</p>\n                      <p className=\"text-2xl font-bold text-text-custom\" data-testid=\"stat-monthly-sessions\">\n                        {(stats as any)?.monthlySessions || 0}\n                      </p>\n                    </div>\n                    <div className=\"bg-accent-custom text-white p-3 rounded-lg\">\n                      <BarChart3 className=\"h-6 w-6\" />\n                    </div>\n                  </div>\n                  <div className=\"mt-2 flex items-center text-sm\">\n                    <TrendingUp className=\"h-4 w-4 text-green-600 mr-1\" />\n                    <span className=\"text-green-600\">+15%</span>\n                    <span className=\"text-gray-600 ml-2\">за месяц</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Доход платформы</p>\n                      <p className=\"text-2xl font-bold text-text-custom\" data-testid=\"stat-platform-revenue\">\n                        ₽{(stats as any)?.platformRevenue ? parseFloat((stats as any).platformRevenue).toLocaleString() : 0}\n                      </p>\n                    </div>\n                    <div className=\"bg-yellow-500 text-white p-3 rounded-lg\">\n                      <CreditCard className=\"h-6 w-6\" />\n                    </div>\n                  </div>\n                  <div className=\"mt-2 flex items-center text-sm\">\n                    <TrendingUp className=\"h-4 w-4 text-green-600 mr-1\" />\n                    <span className=\"text-green-600\">+23%</span>\n                    <span className=\"text-gray-600 ml-2\">за месяц</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Recent Activity */}\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold text-text-custom mb-6\">\n                      Недавняя активность\n                    </h3>\n                    <div className=\"space-y-4\">\n                      {recentActivities.map((activity) => {\n                        const Icon = activity.icon;\n                        return (\n                          <div key={activity.id} className=\"flex items-center space-x-4\">\n                            <div className={`p-2 rounded-lg ${activity.color}`}>\n                              <Icon className=\"h-5 w-5\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-text-custom\">{activity.message}</p>\n                              <p className=\"text-sm text-gray-600\">{activity.details}</p>\n                            </div>\n                            <span className=\"text-sm text-gray-500\">{activity.time}</span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Pending Tasks and System Health */}\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"font-semibold text-text-custom mb-4\">Ожидающие задачи</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Верификация документов</span>\n                        <Badge variant=\"destructive\" data-testid=\"pending-verifications\">\n                          {(pendingPsychologists as any[]).length}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Модерация отзывов</span>\n                        <Badge className=\"bg-yellow-100 text-yellow-600\">3</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Споры по платежам</span>\n                        <Badge className=\"bg-orange-100 text-orange-600\">2</Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"font-semibold text-text-custom mb-4\">Состояние системы</h3>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Сервер</span>\n                        <div className=\"flex items-center text-green-600\">\n                          <div className=\"w-2 h-2 bg-green-600 rounded-full mr-1\"></div>\n                          <span className=\"text-sm\">Работает</span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">База данных</span>\n                        <div className=\"flex items-center text-green-600\">\n                          <div className=\"w-2 h-2 bg-green-600 rounded-full mr-1\"></div>\n                          <span className=\"text-sm\">Работает</span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Видео сервис</span>\n                        <div className=\"flex items-center text-yellow-600\">\n                          <div className=\"w-2 h-2 bg-yellow-600 rounded-full mr-1\"></div>\n                          <span className=\"text-sm\">Нагрузка</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Users Tab */}\n        {activeTab === 'users' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-text-custom mb-6\">Управление пользователями</h2>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b\">\n                      <th className=\"text-left py-3 px-4\">Пользователь</th>\n                      <th className=\"text-left py-3 px-4\">Email</th>\n                      <th className=\"text-left py-3 px-4\">Роль</th>\n                      <th className=\"text-left py-3 px-4\">Статус</th>\n                      <th className=\"text-left py-3 px-4\">Дата регистрации</th>\n                      <th className=\"text-left py-3 px-4\">Действия</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {(users as any[]).map((user: any) => (\n                      <tr key={user.id} className=\"border-b hover:bg-gray-50\">\n                        <td className=\"py-3 px-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"w-8 h-8\">\n                              <AvatarImage src={user.avatar} />\n                              <AvatarFallback>\n                                {user.firstName[0]}{user.lastName[0]}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium\">{user.firstName} {user.lastName}</p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4\">{user.email}</td>\n                        <td className=\"py-3 px-4\">\n                          <Badge \n                            variant={user.role === 'admin' ? 'destructive' : 'default'}\n                            className={\n                              user.role === 'psychologist' ? 'bg-secondary-custom text-white' :\n                              user.role === 'client' ? 'bg-primary-custom text-white' : ''\n                            }\n                          >\n                            {user.role === 'admin' ? 'Администратор' :\n                             user.role === 'psychologist' ? 'Психолог' : 'Клиент'}\n                          </Badge>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <Badge variant={user.isVerified ? 'default' : 'secondary'}>\n                            {user.isVerified ? 'Верифицирован' : 'Не верифицирован'}\n                          </Badge>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          {new Date(user.createdAt).toLocaleDateString('ru-RU')}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-manage-${user.id}`}>\n                                <MoreVertical className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              {user.role === 'psychologist' && (\n                                <>\n                                  <DropdownMenuItem \n                                    onClick={() => handleUserAction(user.id, 'approve', user)}\n                                    data-testid={`action-approve-${user.id}`}\n                                  >\n                                    <ShieldCheck className=\"h-4 w-4 mr-2\" />\n                                    Одобрить как психолога\n                                  </DropdownMenuItem>\n                                  <DropdownMenuSeparator />\n                                </>\n                              )}\n                              <DropdownMenuItem \n                                onClick={() => handleUserAction(user.id, user.isFrozen ? 'unfreeze' : 'freeze', user)}\n                                data-testid={`action-freeze-${user.id}`}\n                              >\n                                <UserX className=\"h-4 w-4 mr-2\" />\n                                {user.isFrozen ? 'Разморозить' : 'Заморозить'}\n                              </DropdownMenuItem>\n                              <DropdownMenuSeparator />\n                              <DropdownMenuItem \n                                onClick={() => handleUserAction(user.id, 'delete', user)}\n                                className=\"text-red-600 focus:text-red-600\"\n                                data-testid={`action-delete-${user.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4 mr-2\" />\n                                Удалить пользователя\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Approvals Tab */}\n        {activeTab === 'approvals' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-text-custom mb-6\">\n                Верификация психологов\n              </h2>\n              {(pendingPsychologists as any[]).length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <UserCheck className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    Нет ожидающих верификации\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    Все специалисты прошли проверку документов\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {(pendingPsychologists as any[]).map((psychologist: any) => (\n                    <div key={psychologist.id} className=\"border rounded-lg p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start space-x-4\">\n                          <Avatar className=\"w-16 h-16\">\n                            <AvatarImage src={psychologist.user.avatar} />\n                            <AvatarFallback className=\"bg-primary-custom text-white\">\n                              {psychologist.user.firstName[0]}{psychologist.user.lastName[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1\">\n                            <h3 className=\"text-lg font-semibold text-text-custom\">\n                              Др. {psychologist.user.firstName} {psychologist.user.lastName}\n                            </h3>\n                            <p className=\"text-gray-600 mb-2\">{psychologist.specialization}</p>\n                            <p className=\"text-sm text-gray-600 mb-2\">\n                              <strong>Опыт:</strong> {psychologist.experience} лет\n                            </p>\n                            <p className=\"text-sm text-gray-600 mb-2\">\n                              <strong>Образование:</strong> {psychologist.education}\n                            </p>\n                            <p className=\"text-sm text-gray-600 mb-2\">\n                              <strong>Email:</strong> {psychologist.user.email}\n                            </p>\n                            <p className=\"text-sm text-gray-600\">\n                              <strong>Описание:</strong> {psychologist.description}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-3\">\n                          <Button\n                            className=\"bg-green-600 text-white hover:bg-green-700\"\n                            onClick={() => handleApprovePsychologist(psychologist.id)}\n                            data-testid={`button-approve-${psychologist.id}`}\n                          >\n                            Одобрить\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            className=\"border-red-300 text-red-600 hover:bg-red-50\"\n                            onClick={() => handleRejectPsychologist(psychologist.id, `${psychologist.user?.firstName} ${psychologist.user?.lastName}`)}\n                            data-testid={`button-reject-${psychologist.id}`}\n                          >\n                            Отклонить\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Payments Tab */}\n        {activeTab === 'payments' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <CreditCard className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  Управление платежами\n                </h3>\n                <p className=\"text-gray-600\">\n                  Система управления платежами будет доступна в следующей версии\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Reports Tab */}\n        {activeTab === 'reports' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <FileText className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  Отчеты и аналитика\n                </h3>\n                <p className=\"text-gray-600\">\n                  Подробные отчеты и аналитика будут доступны в следующей версии\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":29297},"client/src/pages/booking.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, Video, Phone, MessageSquare, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport { BookingData } from \"@/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Booking() {\n  const { psychologistId } = useParams<{ psychologistId: string }>();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [selectedTime, setSelectedTime] = useState<string>(\"\");\n  const [format, setFormat] = useState<'video' | 'audio' | 'chat'>('video');\n  const [notes, setNotes] = useState(\"\");\n  const [step, setStep] = useState<'selection' | 'payment' | 'confirmation'>('selection');\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const currentUser = authService.getCurrentUser();\n\n  const { data: psychologist, isLoading } = useQuery({\n    queryKey: ['/api/psychologists', psychologistId],\n    enabled: !!psychologistId,\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (bookingData: BookingData) => {\n      const response = await apiRequest('POST', '/api/appointments', {\n        clientId: currentUser?.id,\n        psychologistId: bookingData.psychologistId,\n        dateTime: bookingData.dateTime.toISOString(),\n        format: bookingData.format,\n        price: psychologist?.price,\n        notes: bookingData.notes,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setStep('confirmation');\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      toast({\n        title: \"Запись успешна\",\n        description: \"Ваша консультация забронирована. Подробности отправлены на email.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка бронирования\",\n        description: \"Попробуйте еще раз или выберите другое время\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!currentUser) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-4\">Необходима авторизация</h2>\n            <p className=\"text-gray-600 mb-4\">\n              Для записи на консультацию необходимо войти в систему\n            </p>\n            <Button className=\"bg-primary-custom text-white hover:bg-primary-custom/90\">\n              Войти в систему\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-custom mx-auto mb-4\"></div>\n          <p>Загрузка информации о специалисте...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!psychologist) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-4\">Специалист не найден</h2>\n            <p className=\"text-gray-600\">\n              Возможно, специалист больше не принимает клиентов\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleBooking = () => {\n    if (!selectedTime) {\n      toast({\n        title: \"Выберите время\",\n        description: \"Пожалуйста, выберите время для консультации\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const [hours, minutes] = selectedTime.split(':').map(Number);\n    const bookingDateTime = new Date(selectedDate);\n    bookingDateTime.setHours(hours, minutes, 0, 0);\n\n    bookingMutation.mutate({\n      psychologistId: psychologist.id,\n      dateTime: bookingDateTime,\n      format,\n      notes,\n    });\n  };\n\n  const timeSlots = [\n    \"09:00\", \"10:30\", \"12:00\", \"13:30\", \"15:00\", \"16:30\", \"18:00\", \"19:30\"\n  ];\n\n  const formatIcons = {\n    video: Video,\n    audio: Phone,\n    chat: MessageSquare,\n  };\n\n  const formatLabels = {\n    video: 'Видео звонок',\n    audio: 'Аудио звонок',\n    chat: 'Текстовый чат',\n  };\n\n  if (step === 'confirmation') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-12\">\n        <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"text-center p-8\">\n            <div className=\"mb-6\">\n              <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n                <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                </svg>\n              </div>\n              <h1 className=\"text-2xl font-bold text-text-custom mb-2\">\n                Консультация забронирована!\n              </h1>\n              <p className=\"text-gray-600\">\n                Подтверждение отправлено на ваш email\n              </p>\n            </div>\n            \n            <div className=\"bg-gray-50 rounded-lg p-6 mb-6 text-left\">\n              <h3 className=\"font-semibold mb-4\">Детали консультации:</h3>\n              <div className=\"space-y-2 text-sm\">\n                <p><strong>Специалист:</strong> Др. {psychologist.user.firstName} {psychologist.user.lastName}</p>\n                <p><strong>Дата:</strong> {selectedDate.toLocaleDateString('ru-RU')}</p>\n                <p><strong>Время:</strong> {selectedTime} - {\n                  (() => {\n                    const [hours, minutes] = selectedTime.split(':').map(Number);\n                    const endTime = new Date();\n                    endTime.setHours(hours, minutes + 50);\n                    return endTime.toTimeString().slice(0, 5);\n                  })()\n                }</p>\n                <p><strong>Формат:</strong> {formatLabels[format]}</p>\n                <p><strong>Стоимость:</strong> ₽{parseFloat(psychologist.price).toLocaleString()}</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <Button \n                className=\"w-full bg-primary-custom text-white hover:bg-primary-custom/90\"\n                onClick={() => window.location.href = '/dashboard'}\n              >\n                Перейти в личный кабинет\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"w-full\"\n                onClick={() => window.location.href = '/search'}\n              >\n                Найти других специалистов\n              </Button>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <Card className=\"overflow-hidden\">\n          {/* Psychologist Header */}\n          <div className=\"bg-gradient-to-r from-primary-custom to-secondary-custom p-8 text-white\">\n            <div className=\"flex items-center space-x-6\">\n              <Avatar className=\"w-24 h-24 border-4 border-white\">\n                <AvatarImage src={psychologist.user.avatar} />\n                <AvatarFallback className=\"bg-white text-primary-custom text-lg\">\n                  {psychologist.user.firstName[0]}{psychologist.user.lastName[0]}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h1 className=\"text-2xl font-bold mb-2\">\n                  Др. {psychologist.user.firstName} {psychologist.user.lastName}\n                </h1>\n                <p className=\"text-blue-100 mb-2\">{psychologist.specialization}</p>\n                <div className=\"flex items-center space-x-4 text-sm\">\n                  <div className=\"flex items-center\">\n                    <Star className=\"h-4 w-4 mr-1 fill-yellow-400 text-yellow-400\" />\n                    <span>{psychologist.rating} ({psychologist.totalReviews} отзывов)</span>\n                  </div>\n                  <span>• {psychologist.experience} лет опыта</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <CardContent className=\"p-8\">\n            {/* Step Indicator */}\n            <div className=\"flex items-center justify-center mb-8\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-primary-custom text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-medium\">\n                    1\n                  </div>\n                  <span className=\"ml-2 text-primary-custom font-medium\">Выбор времени</span>\n                </div>\n                <div className=\"w-12 h-0.5 bg-gray-300\"></div>\n                <div className=\"flex items-center\">\n                  <div className=\"bg-gray-300 text-gray-500 rounded-full w-8 h-8 flex items-center justify-center text-sm font-medium\">\n                    2\n                  </div>\n                  <span className=\"ml-2 text-gray-500\">Оплата</span>\n                </div>\n                <div className=\"w-12 h-0.5 bg-gray-300\"></div>\n                <div className=\"flex items-center\">\n                  <div className=\"bg-gray-300 text-gray-500 rounded-full w-8 h-8 flex items-center justify-center text-sm font-medium\">\n                    3\n                  </div>\n                  <span className=\"ml-2 text-gray-500\">Подтверждение</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Calendar Selection */}\n              <div>\n                <h3 className=\"text-xl font-semibold text-text-custom mb-4\">\n                  Выберите дату и время\n                </h3>\n                \n                <div className=\"border rounded-xl p-4 mb-6\">\n                  <div className=\"mb-4\">\n                    <Label className=\"text-sm font-medium\">Дата консультации</Label>\n                    <div className=\"mt-2 p-3 border rounded-lg bg-gray-50\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-4 w-4 text-primary-custom\" />\n                        <span>{selectedDate.toLocaleDateString('ru-RU', { \n                          weekday: 'long', \n                          year: 'numeric', \n                          month: 'long', \n                          day: 'numeric' \n                        })}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium mb-3 block\">\n                      Доступное время:\n                    </Label>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      {timeSlots.map((time) => (\n                        <button\n                          key={time}\n                          onClick={() => setSelectedTime(time)}\n                          className={`p-2 text-sm rounded-lg border transition-colors ${\n                            selectedTime === time\n                              ? 'bg-primary-custom text-white border-primary-custom'\n                              : 'border-gray-200 hover:border-primary-custom hover:text-primary-custom'\n                          }`}\n                          data-testid={`time-slot-${time}`}\n                        >\n                          {time}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Session Details */}\n              <div>\n                <h3 className=\"text-xl font-semibold text-text-custom mb-4\">\n                  Детали сессии\n                </h3>\n                \n                <div className=\"space-y-6\">\n                  {/* Format Selection */}\n                  <div>\n                    <Label className=\"text-sm font-medium text-text-custom mb-3 block\">\n                      Формат консультации\n                    </Label>\n                    <RadioGroup value={format} onValueChange={setFormat as (value: string) => void}>\n                      {(['video', 'audio', 'chat'] as const).map((formatOption) => {\n                        const Icon = formatIcons[formatOption];\n                        return (\n                          <div \n                            key={formatOption}\n                            className={`flex items-center space-x-3 p-3 border rounded-lg cursor-pointer transition-colors ${\n                              format === formatOption ? 'border-primary-custom bg-blue-50' : 'border-gray-200 hover:border-primary-custom'\n                            }`}\n                          >\n                            <RadioGroupItem value={formatOption} id={formatOption} />\n                            <Icon className=\"h-5 w-5 text-primary-custom\" />\n                            <Label htmlFor={formatOption} className=\"cursor-pointer flex-1\">\n                              {formatLabels[formatOption]}\n                            </Label>\n                          </div>\n                        );\n                      })}\n                    </RadioGroup>\n                  </div>\n\n                  {/* Session Notes */}\n                  <div>\n                    <Label htmlFor=\"notes\" className=\"text-sm font-medium text-text-custom mb-2 block\">\n                      Дополнительная информация (по желанию)\n                    </Label>\n                    <Textarea\n                      id=\"notes\"\n                      value={notes}\n                      onChange={(e) => setNotes(e.target.value)}\n                      placeholder=\"Опишите кратко, с какими вопросами вы хотели бы обратиться...\"\n                      rows={3}\n                      data-testid=\"textarea-notes\"\n                    />\n                  </div>\n\n                  {/* Booking Summary */}\n                  <Card className=\"bg-muted-custom\">\n                    <CardContent className=\"p-6\">\n                      <h4 className=\"font-semibold text-text-custom mb-4\">Детали бронирования</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Дата:</span>\n                          <span>{selectedDate.toLocaleDateString('ru-RU')}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Время:</span>\n                          <span>{selectedTime || 'Не выбрано'} {selectedTime && '- '}\n                            {selectedTime && (() => {\n                              const [hours, minutes] = selectedTime.split(':').map(Number);\n                              const endTime = new Date();\n                              endTime.setHours(hours, minutes + 50);\n                              return endTime.toTimeString().slice(0, 5);\n                            })()}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Формат:</span>\n                          <span>{formatLabels[format]}</span>\n                        </div>\n                        <div className=\"flex justify-between font-semibold text-lg pt-2 border-t\">\n                          <span>Итого:</span>\n                          <span>₽{parseFloat(psychologist.price).toLocaleString()}</span>\n                        </div>\n                      </div>\n                      <Button \n                        className=\"w-full bg-primary-custom text-white mt-4 hover:bg-primary-custom/90\" \n                        onClick={handleBooking}\n                        disabled={!selectedTime || bookingMutation.isPending}\n                        data-testid=\"button-proceed-payment\"\n                      >\n                        {bookingMutation.isPending ? 'Бронирование...' : 'Перейти к оплате'}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17733},"client/src/pages/client-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Calendar, MessageSquare, User, CreditCard, Search, Star, Settings } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { authService } from \"@/lib/auth\";\nimport AppointmentCard from \"@/components/appointment-card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { AppointmentWithDetails, Appointment } from \"@shared/schema\";\n\ntype TabType = 'appointments' | 'messages' | 'profile' | 'billing';\n\nexport default function ClientDashboard() {\n  const [activeTab, setActiveTab] = useState<TabType>('appointments');\n  const [, navigate] = useLocation();\n  const currentUser = authService.getCurrentUser();\n  const { toast } = useToast();\n\n  const { data: appointments = [], isLoading: appointmentsLoading } = useQuery<AppointmentWithDetails[]>({\n    queryKey: ['/api/appointments/client', currentUser?.id],\n    enabled: !!currentUser?.id && activeTab === 'appointments',\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: ['/api/messages', currentUser?.id],\n    enabled: !!currentUser?.id && activeTab === 'messages',\n  });\n\n  if (!currentUser || currentUser.role !== 'client') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-4\">Доступ запрещен</h2>\n            <p className=\"text-gray-600\">\n              Эта страница доступна только для клиентов\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const upcomingAppointments = appointments.filter((apt) => \n    new Date(apt.dateTime) > new Date() && apt.status === 'scheduled'\n  );\n\n  const pastAppointments = appointments.filter((apt) => \n    new Date(apt.dateTime) < new Date() || apt.status === 'completed'\n  );\n\n  const handleCancelAppointment = (appointmentId: string) => {\n    toast({\n      title: \"Функция в разработке\",\n      description: \"Отмена записи будет доступна в следующей версии\",\n    });\n  };\n\n  const handleRescheduleAppointment = (appointmentId: string) => {\n    toast({\n      title: \"Функция в разработке\", \n      description: \"Перенос записи будет доступен в следующей версии\",\n    });\n  };\n\n  const handleStartSession = (appointmentId: string) => {\n    window.location.href = `/consultation/${appointmentId}`;\n  };\n\n  const tabs = [\n    { id: 'appointments', label: 'Мои консультации', icon: Calendar },\n    { id: 'messages', label: 'Сообщения', icon: MessageSquare },\n    { id: 'profile', label: 'Профиль', icon: User },\n    { id: 'billing', label: 'Платежи', icon: CreditCard },\n  ] as const;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-text-custom\">Личный кабинет</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Добро пожаловать, {currentUser.firstName} {currentUser.lastName}!\n          </p>\n        </div>\n\n        {/* Dashboard Navigation */}\n        <Card className=\"mb-8\">\n          <nav className=\"flex space-x-8 px-6\" data-testid=\"dashboard-nav\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`py-4 font-medium transition-colors flex items-center space-x-2 ${\n                    activeTab === tab.id\n                      ? 'text-primary-custom border-b-2 border-primary-custom'\n                      : 'text-gray-500 hover:text-primary-custom'\n                  }`}\n                  data-testid={`tab-${tab.id}`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span>{tab.label}</span>\n                </button>\n              );\n            })}\n          </nav>\n        </Card>\n\n        {/* Appointments Tab */}\n        {activeTab === 'appointments' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Upcoming Appointments */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-xl font-semibold text-text-custom\">\n                      Предстоящие консультации\n                    </h2>\n                    <Link href=\"/search\">\n                      <Button \n                        className=\"bg-primary-custom text-white hover:bg-primary-custom/90\"\n                        data-testid=\"button-book-new-session\"\n                      >\n                        Записаться\n                      </Button>\n                    </Link>\n                  </div>\n\n                  {appointmentsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"flex items-start space-x-4\">\n                            <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n                            <div className=\"flex-1 space-y-2\">\n                              <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                              <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                              <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : upcomingAppointments.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                        Нет предстоящих консультаций\n                      </h3>\n                      <p className=\"text-gray-600 mb-4\">\n                        Найдите подходящего специалиста и запишитесь на консультацию\n                      </p>\n                      <Link href=\"/search\">\n                        <Button \n                          className=\"bg-primary-custom text-white hover:bg-primary-custom/90\"\n                          data-testid=\"button-find-psychologist\"\n                        >\n                          Найти психолога\n                        </Button>\n                      </Link>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {upcomingAppointments.map((appointment: any) => (\n                        <AppointmentCard\n                          key={appointment.id}\n                          appointment={appointment}\n                          userRole=\"client\"\n                          onCancel={handleCancelAppointment}\n                          onReschedule={handleRescheduleAppointment}\n                          onStartSession={handleStartSession}\n                        />\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Past Sessions */}\n                  {pastAppointments.length > 0 && (\n                    <div className=\"mt-8\">\n                      <h3 className=\"text-lg font-semibold text-text-custom mb-4\">\n                        Прошедшие консультации\n                      </h3>\n                      <div className=\"space-y-3\">\n                        {pastAppointments.slice(0, 3).map((appointment: any) => (\n                          <div \n                            key={appointment.id} \n                            className=\"border rounded-xl p-4 hover:bg-gray-50 transition-colors\"\n                            data-testid={`past-appointment-${appointment.id}`}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <p className=\"font-medium text-text-custom\">\n                                  Др. {appointment.psychologist.user.firstName} {appointment.psychologist.user.lastName}\n                                </p>\n                                <p className=\"text-sm text-gray-600\">\n                                  {new Date(appointment.dateTime).toLocaleDateString('ru-RU')} • {appointment.format}\n                                </p>\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"text-primary-custom hover:text-blue-600\"\n                                  data-testid={`button-leave-review-${appointment.id}`}\n                                >\n                                  Оставить отзыв\n                                </Button>\n                                <Link href={`/booking/${appointment.psychologist.id}`}>\n                                  <Button \n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"text-secondary-custom hover:text-green-600\"\n                                    data-testid={`button-book-again-${appointment.id}`}\n                                  >\n                                    Записаться снова\n                                  </Button>\n                                </Link>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Quick Stats */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-text-custom mb-4\">Статистика</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Всего сессий:</span>\n                      <span className=\"font-medium\" data-testid=\"stat-total-sessions\">\n                        {appointments.length}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Активных психологов:</span>\n                      <span className=\"font-medium\" data-testid=\"stat-active-psychologists\">\n                        {new Set(appointments.map((apt) => apt.psychologist.id)).size}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Следующая сессия:</span>\n                      <span className=\"font-medium text-primary-custom\" data-testid=\"stat-next-session\">\n                        {upcomingAppointments.length > 0 ? 'Сегодня' : 'Не запланировано'}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Favorite Psychologists */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-text-custom mb-4\">Мои психологи</h3>\n                  {appointments.length === 0 ? (\n                    <p className=\"text-gray-600 text-sm\">\n                      Здесь будут отображаться ваши психологи после первых консультаций\n                    </p>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {Array.from(new Map(appointments.map((apt) => [apt.psychologist.id, apt.psychologist])).values())\n                        .slice(0, 3)\n                        .map((psychologist) => (\n                        <div key={psychologist.id} className=\"flex items-center space-x-3\">\n                          <Avatar className=\"w-10 h-10\">\n                            <AvatarImage src={psychologist.user.avatar || undefined} />\n                            <AvatarFallback className=\"bg-primary-custom text-white\">\n                              {psychologist.user.firstName[0]}{psychologist.user.lastName[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium text-text-custom text-sm\">\n                              Др. {psychologist.user.firstName} {psychologist.user.lastName}\n                            </p>\n                            <p className=\"text-xs text-gray-600\">{psychologist.specialization}</p>\n                          </div>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            className=\"text-primary-custom hover:text-primary-custom/90\"\n                            data-testid={`button-message-${psychologist.id}`}\n                          >\n                            <MessageSquare className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Quick Book */}\n              <div className=\"bg-gradient-to-r from-primary-custom to-secondary-custom rounded-xl p-6 text-white\">\n                <h3 className=\"font-semibold mb-2\">Нужна помощь?</h3>\n                <p className=\"text-sm text-blue-100 mb-4\">\n                  Найдите подходящего специалиста\n                </p>\n                <Link href=\"/search\">\n                  <Button \n                    className=\"bg-white text-primary-custom hover:bg-gray-100 transition\"\n                    data-testid=\"button-find-psychologist-sidebar\"\n                  >\n                    Найти психолога\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Messages Tab */}\n        {activeTab === 'messages' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <MessageSquare className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  Система сообщений\n                </h3>\n                <p className=\"text-gray-600\">\n                  Функция обмена сообщениями будет доступна в следующей версии\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Profile Tab */}\n        {activeTab === 'profile' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-text-custom mb-6\">Профиль</h2>\n              <div className=\"max-w-md space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Имя\n                  </label>\n                  <p className=\"text-text-custom\">{currentUser.firstName}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Фамилия\n                  </label>\n                  <p className=\"text-text-custom\">{currentUser.lastName}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Email\n                  </label>\n                  <p className=\"text-text-custom\">{currentUser.email}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Статус\n                  </label>\n                  <Badge variant={currentUser.isVerified ? \"default\" : \"secondary\"}>\n                    {currentUser.isVerified ? \"Верифицирован\" : \"Не верифицирован\"}\n                  </Badge>\n                </div>\n                <Button \n                  onClick={() => navigate(\"/edit-profile\")}\n                  className=\"bg-primary-custom text-white hover:bg-primary-custom/90 flex items-center gap-2\"\n                  data-testid=\"button-edit-profile\"\n                >\n                  <Settings className=\"h-4 w-4\" />\n                  Редактировать профиль\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Billing Tab */}\n        {activeTab === 'billing' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <CreditCard className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                  История платежей\n                </h3>\n                <p className=\"text-gray-600\">\n                  Информация о платежах будет доступна в следующей версии\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":18567},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { Heart, Shield, Video, Calendar, CreditCard, Users } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"bg-gradient-hero py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl lg:text-6xl font-bold text-text-custom mb-6\">\n                Найдите своего <span className=\"text-primary-custom\">психолога</span> онлайн\n              </h1>\n              <p className=\"text-xl text-gray-600 mb-8 leading-relaxed\">\n                Профессиональная психологическая помощь от квалифицированных специалистов. \n                Безопасно, удобно, конфиденциально.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/search\">\n                  <Button \n                    className=\"bg-primary-custom text-white px-8 py-4 rounded-xl font-semibold hover:bg-primary-custom/90 transition text-lg\"\n                    data-testid=\"button-find-psychologist\"\n                  >\n                    Найти специалиста\n                  </Button>\n                </Link>\n                <Button \n                  variant=\"outline\"\n                  className=\"border-2 border-secondary-custom text-secondary-custom px-8 py-4 rounded-xl font-semibold hover:bg-secondary-custom hover:text-white transition text-lg\"\n                  data-testid=\"button-become-psychologist\"\n                >\n                  Стать психологом\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Professional therapy session\" \n                className=\"rounded-2xl shadow-2xl w-full h-auto\"\n              />\n              <div className=\"absolute -bottom-6 -left-6 bg-white p-6 rounded-xl shadow-lg\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"bg-secondary-custom text-white p-3 rounded-full\">\n                    <Shield className=\"h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-text-custom\">100% Конфиденциально</p>\n                    <p className=\"text-sm text-gray-600\">Защищенные сессии</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-text-custom mb-4\">\n              Почему выбирают нашу платформу\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Мы создали безопасную и удобную среду для получения психологической помощи\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <div className=\"bg-blue-50 p-8 rounded-2xl text-center\">\n              <div className=\"bg-primary-custom text-white p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Users className=\"h-8 w-8\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-text-custom mb-4\">Проверенные специалисты</h3>\n              <p className=\"text-gray-600\">\n                Все психологи проходят тщательную верификацию документов и имеют подтвержденную квалификацию\n              </p>\n            </div>\n            \n            <div className=\"bg-green-50 p-8 rounded-2xl text-center\">\n              <div className=\"bg-secondary-custom text-white p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Video className=\"h-8 w-8\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-text-custom mb-4\">Онлайн консультации</h3>\n              <p className=\"text-gray-600\">\n                Видео, аудио или чат - выберите удобный формат для проведения сессий\n              </p>\n            </div>\n            \n            <div className=\"bg-purple-50 p-8 rounded-2xl text-center\">\n              <div className=\"bg-accent-custom text-white p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Shield className=\"h-8 w-8\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-text-custom mb-4\">Полная конфиденциальность</h3>\n              <p className=\"text-gray-600\">\n                Надежная защита данных и соблюдение врачебной тайны\n              </p>\n            </div>\n            \n            <div className=\"bg-yellow-50 p-8 rounded-2xl text-center\">\n              <div className=\"bg-yellow-500 text-white p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Calendar className=\"h-8 w-8\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-text-custom mb-4\">Гибкое расписание</h3>\n              <p className=\"text-gray-600\">\n                Записывайтесь на удобное время, включая вечерние часы и выходные\n              </p>\n            </div>\n            \n            <div className=\"bg-pink-50 p-8 rounded-2xl text-center\">\n              <div className=\"bg-pink-500 text-white p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <Heart className=\"h-8 w-8\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-text-custom mb-4\">Персональный подход</h3>\n              <p className=\"text-gray-600\">\n                Найдите специалиста по вашим конкретным запросам и потребностям\n              </p>\n            </div>\n            \n            <div className=\"bg-indigo-50 p-8 rounded-2xl text-center\">\n              <div className=\"bg-indigo-500 text-white p-4 rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center\">\n                <CreditCard className=\"h-8 w-8\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-text-custom mb-4\">Безопасные платежи</h3>\n              <p className=\"text-gray-600\">\n                Защищенная система оплаты с возможностью возврата средств\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section className=\"py-20 bg-gray-50\" id=\"how-it-works\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-text-custom mb-4\">\n              Как это работает\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Простой процесс получения психологической помощи\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"bg-primary-custom text-white rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center text-2xl font-bold\">\n                1\n              </div>\n              <h3 className=\"text-xl font-semibold text-text-custom mb-4\">Найдите специалиста</h3>\n              <p className=\"text-gray-600\">\n                Используйте фильтры по специализации, цене, рейтингу и доступности для поиска подходящего психолога\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"bg-secondary-custom text-white rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center text-2xl font-bold\">\n                2\n              </div>\n              <h3 className=\"text-xl font-semibold text-text-custom mb-4\">Запишитесь на сессию</h3>\n              <p className=\"text-gray-600\">\n                Выберите удобное время в календаре специалиста и оплатите консультацию\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"bg-accent-custom text-white rounded-full w-16 h-16 mx-auto mb-6 flex items-center justify-center text-2xl font-bold\">\n                3\n              </div>\n              <h3 className=\"text-xl font-semibold text-text-custom mb-4\">Проведите консультацию</h3>\n              <p className=\"text-gray-600\">\n                Получите профессиональную помощь через видео, аудио или чат в удобное время\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-primary-custom\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-white mb-6\">\n            Начните заботиться о своем ментальном здоровье уже сегодня\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8\">\n            Присоединитесь к тысячам людей, которые уже получили помощь через нашу платформу\n          </p>\n          <Link href=\"/search\">\n            <Button \n              className=\"bg-white text-primary-custom px-8 py-4 rounded-xl font-semibold hover:bg-gray-100 transition text-lg\"\n              data-testid=\"button-get-started\"\n            >\n              Начать сейчас\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-text-custom text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <h3 className=\"text-xl font-bold mb-4\">PsychPlatform</h3>\n              <p className=\"text-gray-300 mb-4\">\n                Профессиональная психологическая помощь онлайн\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Для клиентов</h4>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white transition\">Найти психолога</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition\">Как это работает</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition\">Цены</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition\">FAQ</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Для психологов</h4>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white transition\">Стать специалистом</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition\">Требования</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition\">Условия работы</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition\">Поддержка</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Компания</h4>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white transition\">О нас</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition\">Карьера</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition\">Политика конфиденциальности</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition\">Условия использования</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-700 mt-8 pt-8 text-center text-gray-300\">\n            <p>&copy; 2024 PsychPlatform. Все права защищены.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":13502},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/psychologist-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Users, DollarSign, Settings, Clock, CheckCircle, MessageSquare } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport AppointmentCard from \"@/components/appointment-card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype TabType = 'schedule' | 'clients' | 'earnings' | 'profile';\n\nexport default function PsychologistDashboard() {\n  const [activeTab, setActiveTab] = useState<TabType>('schedule');\n  const [, navigate] = useLocation();\n  const currentUser = authService.getCurrentUser();\n  const { toast } = useToast();\n\n  const { data: psychologist } = useQuery({\n    queryKey: ['/api/psychologists/user', currentUser?.id],\n    enabled: !!currentUser?.id,\n  });\n\n  const { data: appointments = [], isLoading: appointmentsLoading } = useQuery({\n    queryKey: ['/api/appointments/psychologist', psychologist?.id],\n    enabled: !!psychologist?.id && activeTab === 'schedule',\n  });\n\n  if (!currentUser || currentUser.role !== 'psychologist') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-4\">Доступ запрещен</h2>\n            <p className=\"text-gray-600\">\n              Эта страница доступна только для психологов\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const today = new Date();\n  const todayAppointments = appointments.filter((apt: any) => {\n    const aptDate = new Date(apt.dateTime);\n    return aptDate.toDateString() === today.toDateString();\n  });\n\n  const upcomingAppointments = appointments.filter((apt: any) => \n    new Date(apt.dateTime) > new Date() && apt.status === 'scheduled'\n  );\n\n  const completedAppointments = appointments.filter((apt: any) => \n    apt.status === 'completed'\n  );\n\n  const handleStartSession = (appointmentId: string) => {\n    window.location.href = `/consultation/${appointmentId}`;\n  };\n\n  const handleCancelAppointment = (appointmentId: string) => {\n    toast({\n      title: \"Функция в разработке\",\n      description: \"Отмена записи будет доступна в следующей версии\",\n    });\n  };\n\n  const handleRescheduleAppointment = (appointmentId: string) => {\n    toast({\n      title: \"Функция в разработке\",\n      description: \"Перенос записи будет доступен в следующей версии\",\n    });\n  };\n\n  const tabs = [\n    { id: 'schedule', label: 'Расписание', icon: Calendar },\n    { id: 'clients', label: 'Клиенты', icon: Users },\n    { id: 'earnings', label: 'Доходы', icon: DollarSign },\n    { id: 'profile', label: 'Профиль', icon: Settings },\n  ] as const;\n\n  // Calculate stats\n  const todayEarnings = todayAppointments.reduce((sum: number, apt: any) => \n    sum + parseFloat(apt.price), 0\n  );\n\n  const activeClients = new Set(appointments.map((apt: any) => apt.client.id)).size;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-text-custom\">Кабинет психолога</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Добро пожаловать, {currentUser.firstName} {currentUser.lastName}!\n          </p>\n        </div>\n\n        {/* Dashboard Navigation */}\n        <Card className=\"mb-8\">\n          <nav className=\"flex space-x-8 px-6\" data-testid=\"dashboard-nav\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`py-4 font-medium transition-colors flex items-center space-x-2 ${\n                    activeTab === tab.id\n                      ? 'text-primary-custom border-b-2 border-primary-custom'\n                      : 'text-gray-500 hover:text-primary-custom'\n                  }`}\n                  data-testid={`tab-${tab.id}`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span>{tab.label}</span>\n                </button>\n              );\n            })}\n          </nav>\n        </Card>\n\n        {/* Schedule Tab */}\n        {activeTab === 'schedule' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Today's Schedule */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-xl font-semibold text-text-custom\">\n                      Сегодняшнее расписание\n                    </h2>\n                    <div className=\"text-sm text-gray-500\">\n                      {today.toLocaleDateString('ru-RU', { \n                        weekday: 'long', \n                        year: 'numeric', \n                        month: 'long', \n                        day: 'numeric' \n                      })}\n                    </div>\n                  </div>\n\n                  {appointmentsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"flex items-start space-x-4 p-4 border rounded-xl\">\n                            <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n                            <div className=\"flex-1 space-y-2\">\n                              <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                              <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : todayAppointments.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                        Нет записей на сегодня\n                      </h3>\n                      <p className=\"text-gray-600\">\n                        У вас свободный день. Можете отдохнуть или заблокировать время.\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {todayAppointments.map((appointment: any) => (\n                        <AppointmentCard\n                          key={appointment.id}\n                          appointment={appointment}\n                          userRole=\"psychologist\"\n                          onCancel={handleCancelAppointment}\n                          onReschedule={handleRescheduleAppointment}\n                          onStartSession={handleStartSession}\n                        />\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Free time slots */}\n                  {todayAppointments.length > 0 && (\n                    <div className=\"mt-6\">\n                      <div className=\"border-2 border-dashed border-gray-300 p-4 rounded-xl text-center\">\n                        <p className=\"text-gray-500\">18:00 - 19:00</p>\n                        <p className=\"text-sm text-gray-400 mb-2\">Свободное время</p>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"text-primary-custom hover:text-primary-custom/90\"\n                          data-testid=\"button-block-time\"\n                        >\n                          Заблокировать время\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Today's Stats */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-text-custom mb-4\">Сегодня</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"bg-primary-custom text-white p-2 rounded-lg\">\n                        <CheckCircle className=\"h-5 w-5\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\" data-testid=\"stat-today-sessions\">\n                          {todayAppointments.length} сессий\n                        </p>\n                        <p className=\"text-sm text-gray-600\">Запланировано</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"bg-secondary-custom text-white p-2 rounded-lg\">\n                        <DollarSign className=\"h-5 w-5\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\" data-testid=\"stat-today-earnings\">\n                          ₽{todayEarnings.toLocaleString()}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">Доход за день</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"bg-accent-custom text-white p-2 rounded-lg\">\n                        <Users className=\"h-5 w-5\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\" data-testid=\"stat-active-clients\">\n                          {activeClients} клиентов\n                        </p>\n                        <p className=\"text-sm text-gray-600\">Активные</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-text-custom mb-4\">Быстрые действия</h3>\n                  <div className=\"space-y-3\">\n                    <Button \n                      variant=\"ghost\" \n                      className=\"w-full justify-start text-left p-3 h-auto\"\n                      data-testid=\"button-manage-schedule\"\n                    >\n                      <Calendar className=\"h-5 w-5 text-primary-custom mr-3\" />\n                      <span>Управление расписанием</span>\n                    </Button>\n                    <Button \n                      variant=\"ghost\" \n                      className=\"w-full justify-start text-left p-3 h-auto\"\n                      data-testid=\"button-view-messages\"\n                    >\n                      <MessageSquare className=\"h-5 w-5 text-secondary-custom mr-3\" />\n                      <span>Сообщения от клиентов</span>\n                    </Button>\n                    <Button \n                      variant=\"ghost\" \n                      className=\"w-full justify-start text-left p-3 h-auto\"\n                      onClick={() => setActiveTab('earnings')}\n                      data-testid=\"button-earnings-report\"\n                    >\n                      <DollarSign className=\"h-5 w-5 text-accent-custom mr-3\" />\n                      <span>Отчет о доходах</span>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Profile Status */}\n              <div className=\"bg-gradient-to-r from-secondary-custom to-green-600 rounded-xl p-6 text-white\">\n                <h3 className=\"font-semibold mb-2\">Статус профиля</h3>\n                <div className=\"flex items-center space-x-2 mb-3\">\n                  <CheckCircle className=\"h-5 w-5\" />\n                  <span className=\"text-sm\">\n                    {psychologist?.isApproved ? 'Верифицирован' : 'На модерации'}\n                  </span>\n                </div>\n                <p className=\"text-sm text-green-100 mb-4\">\n                  {psychologist?.isApproved \n                    ? 'Ваш профиль активен и виден клиентам'\n                    : 'Ваш профиль проходит проверку'\n                  }\n                </p>\n                <Button \n                  className=\"bg-white text-secondary-custom hover:bg-gray-100 transition\"\n                  onClick={() => setActiveTab('profile')}\n                  data-testid=\"button-edit-profile\"\n                >\n                  Редактировать профиль\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Clients Tab */}\n        {activeTab === 'clients' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-text-custom mb-6\">Мои клиенты</h2>\n              {appointments.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Users className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    Пока нет клиентов\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    Клиенты появятся здесь после первых записей на консультации\n                  </p>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {[...new Map(appointments.map((apt: any) => [apt.client.id, apt.client])).values()]\n                    .map((client: any) => {\n                      const clientAppointments = appointments.filter((apt: any) => apt.client.id === client.id);\n                      const lastAppointment = clientAppointments[clientAppointments.length - 1];\n                      \n                      return (\n                        <Card key={client.id} className=\"hover:shadow-md transition-shadow\">\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-center space-x-3 mb-3\">\n                              <div className=\"w-10 h-10 bg-primary-custom text-white rounded-full flex items-center justify-center\">\n                                {client.firstName[0]}{client.lastName[0]}\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-text-custom\">\n                                  {client.firstName} {client.lastName}\n                                </p>\n                                <p className=\"text-sm text-gray-600\">\n                                  {clientAppointments.length} сессий\n                                </p>\n                              </div>\n                            </div>\n                            <p className=\"text-xs text-gray-500 mb-3\">\n                              Последняя сессия: {new Date(lastAppointment.dateTime).toLocaleDateString('ru-RU')}\n                            </p>\n                            <div className=\"flex space-x-2\">\n                              <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                                История\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <MessageSquare className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Earnings Tab */}\n        {activeTab === 'earnings' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-xl font-semibold text-text-custom mb-6\">Статистика доходов</h2>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <p className=\"text-sm text-gray-600\">Сегодня</p>\n                      <p className=\"text-2xl font-bold text-primary-custom\">\n                        ₽{todayEarnings.toLocaleString()}\n                      </p>\n                    </div>\n                    <div className=\"bg-green-50 p-4 rounded-lg\">\n                      <p className=\"text-sm text-gray-600\">Этот месяц</p>\n                      <p className=\"text-2xl font-bold text-secondary-custom\">\n                        ₽{appointments.reduce((sum: number, apt: any) => sum + parseFloat(apt.price), 0).toLocaleString()}\n                      </p>\n                    </div>\n                    <div className=\"bg-purple-50 p-4 rounded-lg\">\n                      <p className=\"text-sm text-gray-600\">Всего сессий</p>\n                      <p className=\"text-2xl font-bold text-accent-custom\">\n                        {completedAppointments.length}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\n                    <p className=\"text-gray-600\">\n                      Подробная аналитика доходов будет доступна в следующей версии\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-text-custom mb-4\">Итоги</h3>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Средняя стоимость сессии:</span>\n                      <span className=\"font-medium\">\n                        ₽{psychologist?.price ? parseFloat(psychologist.price).toLocaleString() : 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Рейтинг:</span>\n                      <span className=\"font-medium\">{psychologist?.rating || '0.0'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Отзывов:</span>\n                      <span className=\"font-medium\">{psychologist?.totalReviews || 0}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        {/* Profile Tab */}\n        {activeTab === 'profile' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-text-custom mb-6\">Профиль специалиста</h2>\n              {psychologist ? (\n                <div className=\"max-w-2xl space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Имя\n                      </label>\n                      <p className=\"text-text-custom\">{currentUser.firstName}</p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Фамилия\n                      </label>\n                      <p className=\"text-text-custom\">{currentUser.lastName}</p>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Специализация\n                    </label>\n                    <p className=\"text-text-custom\">{psychologist.specialization}</p>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Опыт работы\n                    </label>\n                    <p className=\"text-text-custom\">{psychologist.experience} лет</p>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Образование\n                    </label>\n                    <p className=\"text-text-custom\">{psychologist.education}</p>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Описание\n                    </label>\n                    <p className=\"text-text-custom\">{psychologist.description}</p>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Стоимость сессии\n                    </label>\n                    <p className=\"text-text-custom\">₽{parseFloat(psychologist.price).toLocaleString()}</p>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Статус\n                    </label>\n                    <Badge variant={psychologist.isApproved ? \"default\" : \"secondary\"}>\n                      {psychologist.isApproved ? \"Одобрен\" : \"На модерации\"}\n                    </Badge>\n                  </div>\n\n                  <Button \n                    className=\"bg-primary-custom text-white hover:bg-primary-custom/90\"\n                    onClick={() => navigate(\"/edit-profile\")}\n                    data-testid=\"button-edit-profile\"\n                  >\n                    Редактировать профиль\n                  </Button>\n                </div>\n              ) : (\n                <p className=\"text-gray-600\">Загрузка информации о профиле...</p>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":23430},"client/src/pages/psychologist-search.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Video, Phone, MessageSquare } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { SearchFilters } from \"@/types\";\nimport PsychologistCard from \"@/components/psychologist-card\";\n\nexport default function PsychologistSearch() {\n  const [filters, setFilters] = useState<SearchFilters>({});\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const formatFilters = useCallback((filters: SearchFilters) => {\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== '' && value !== null) {\n        if (Array.isArray(value)) {\n          value.forEach(v => params.append(key, v));\n        } else {\n          params.set(key, String(value));\n        }\n      }\n    });\n    return params.toString();\n  }, []);\n\n  const { data: psychologists = [], isLoading } = useQuery({\n    queryKey: ['/api/psychologists/search', formatFilters(filters)],\n    queryFn: async () => {\n      const queryString = formatFilters(filters);\n      const url = queryString ? `/api/psychologists/search?${queryString}` : '/api/psychologists/search';\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch psychologists');\n      return response.json();\n    },\n    enabled: true,\n  });\n\n  const handleFilterChange = (key: keyof SearchFilters, value: any) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const filteredPsychologists = (psychologists as any[]).filter((psychologist: any) => {\n    if (!searchQuery) return true;\n    const query = searchQuery.toLowerCase();\n    return (\n      psychologist.user.firstName.toLowerCase().includes(query) ||\n      psychologist.user.lastName.toLowerCase().includes(query) ||\n      psychologist.specialization.toLowerCase().includes(query) ||\n      psychologist.description.toLowerCase().includes(query)\n    );\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-text-custom mb-4\">Найти психолога</h1>\n          <p className=\"text-gray-600\">Выберите специалиста, который подходит именно вам</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Filters Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-24\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-text-custom mb-4\">Фильтры</h3>\n                \n                {/* Search Input */}\n                <div className=\"mb-6\">\n                  <Label htmlFor=\"search\">Поиск</Label>\n                  <Input\n                    id=\"search\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    placeholder=\"Имя, специализация...\"\n                    className=\"mt-2\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n\n                {/* Specialization Filter */}\n                <div className=\"mb-6\">\n                  <Label className=\"text-sm font-medium text-text-custom mb-2 block\">\n                    Специализация\n                  </Label>\n                  <Select \n                    value={filters.specialization || undefined} \n                    onValueChange={(value) => handleFilterChange('specialization', value === 'all' ? undefined : value)}\n                  >\n                    <SelectTrigger data-testid=\"select-specialization\">\n                      <SelectValue placeholder=\"Все специализации\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Все специализации</SelectItem>\n                      <SelectItem value=\"anxiety\">Тревожные расстройства</SelectItem>\n                      <SelectItem value=\"depression\">Депрессия</SelectItem>\n                      <SelectItem value=\"relationships\">Отношения</SelectItem>\n                      <SelectItem value=\"family\">Семейная терапия</SelectItem>\n                      <SelectItem value=\"trauma\">Травмы</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Price Filter */}\n                <div className=\"mb-6\">\n                  <Label className=\"text-sm font-medium text-text-custom mb-2 block\">\n                    Цена за сессию (₽)\n                  </Label>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Input\n                        type=\"number\"\n                        placeholder=\"От\"\n                        value={filters.minPrice || ''}\n                        onChange={(e) => handleFilterChange('minPrice', e.target.value ? Number(e.target.value) : undefined)}\n                        className=\"w-20\"\n                        data-testid=\"input-min-price\"\n                      />\n                      <span>-</span>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"До\"\n                        value={filters.maxPrice || ''}\n                        onChange={(e) => handleFilterChange('maxPrice', e.target.value ? Number(e.target.value) : undefined)}\n                        className=\"w-20\"\n                        data-testid=\"input-max-price\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Format Filter */}\n                <div className=\"mb-6\">\n                  <Label className=\"text-sm font-medium text-text-custom mb-2 block\">\n                    Формат консультации\n                  </Label>\n                  <div className=\"space-y-2\">\n                    {[\n                      { value: 'video', label: 'Видео', icon: Video },\n                      { value: 'audio', label: 'Аудио', icon: Phone },\n                      { value: 'chat', label: 'Чат', icon: MessageSquare },\n                    ].map((format) => (\n                      <div key={format.value} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={format.value}\n                          checked={filters.formats?.includes(format.value) || false}\n                          onCheckedChange={(checked) => {\n                            const currentFormats = filters.formats || [];\n                            if (checked) {\n                              handleFilterChange('formats', [...currentFormats, format.value]);\n                            } else {\n                              handleFilterChange('formats', currentFormats.filter(f => f !== format.value));\n                            }\n                          }}\n                          data-testid={`checkbox-format-${format.value}`}\n                        />\n                        <Label htmlFor={format.value} className=\"flex items-center space-x-2 cursor-pointer\">\n                          <format.icon className=\"h-4 w-4\" />\n                          <span>{format.label}</span>\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <Button \n                  className=\"w-full bg-primary-custom text-white hover:bg-primary-custom/90\"\n                  onClick={() => setFilters({})}\n                  variant=\"outline\"\n                  data-testid=\"button-clear-filters\"\n                >\n                  Очистить фильтры\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Psychologist Grid */}\n          <div className=\"lg:col-span-3\">\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"p-6\">\n                    <div className=\"animate-pulse\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"w-16 h-16 bg-gray-200 rounded-full\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            ) : filteredPsychologists.length === 0 ? (\n              <Card className=\"p-12 text-center\">\n                <h3 className=\"text-lg font-semibold text-text-custom mb-2\">\n                  Психологи не найдены\n                </h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Попробуйте изменить параметры поиска\n                </p>\n                <Button \n                  onClick={() => {\n                    setFilters({});\n                    setSearchQuery('');\n                  }}\n                  variant=\"outline\"\n                  data-testid=\"button-reset-search\"\n                >\n                  Сбросить поиск\n                </Button>\n              </Card>\n            ) : (\n              <>\n                <div className=\"mb-6 flex items-center justify-between\">\n                  <p className=\"text-gray-600\">\n                    Найдено {filteredPsychologists.length} специалистов\n                  </p>\n                  <Select defaultValue=\"rating\">\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"Сортировка\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"rating\">По рейтингу</SelectItem>\n                      <SelectItem value=\"price-low\">Цена: по возрастанию</SelectItem>\n                      <SelectItem value=\"price-high\">Цена: по убыванию</SelectItem>\n                      <SelectItem value=\"experience\">По опыту</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {filteredPsychologists.map((psychologist: any) => (\n                    <PsychologistCard \n                      key={psychologist.id} \n                      psychologist={psychologist} \n                    />\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                <div className=\"mt-8 flex justify-center\">\n                  <nav className=\"flex space-x-2\">\n                    <Button variant=\"outline\" disabled>\n                      Предыдущая\n                    </Button>\n                    <Button className=\"bg-primary-custom text-white\">1</Button>\n                    <Button variant=\"outline\">2</Button>\n                    <Button variant=\"outline\">3</Button>\n                    <Button variant=\"outline\">\n                      Следующая\n                    </Button>\n                  </nav>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12226},"client/src/pages/video-consultation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Mic, \n  MicOff, \n  Video, \n  VideoOff, \n  Phone, \n  PhoneOff, \n  MessageSquare, \n  Monitor, \n  X,\n  Send,\n  Clock\n} from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function VideoConsultation() {\n  const { appointmentId } = useParams<{ appointmentId: string }>();\n  const [isAudioMuted, setIsAudioMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [showChat, setShowChat] = useState(false);\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [sessionTime, setSessionTime] = useState(0);\n  const [messages, setMessages] = useState([\n    {\n      id: 1,\n      sender: 'psychologist',\n      text: 'Добро пожаловать на сессию! Как дела?',\n      time: '14:02',\n    }\n  ]);\n\n  const currentUser = authService.getCurrentUser();\n  const { toast } = useToast();\n\n  const { data: appointment, isLoading } = useQuery({\n    queryKey: ['/api/appointments', appointmentId],\n    enabled: !!appointmentId,\n  });\n\n  // Session timer\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setSessionTime(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const formatSessionTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleSendMessage = () => {\n    if (chatMessage.trim()) {\n      const newMessage = {\n        id: messages.length + 1,\n        sender: currentUser?.role || 'client',\n        text: chatMessage.trim(),\n        time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),\n      };\n      setMessages(prev => [...prev, newMessage]);\n      setChatMessage(\"\");\n    }\n  };\n\n  const handleEndSession = () => {\n    toast({\n      title: \"Сессия завершена\",\n      description: \"Спасибо за консультацию. Отзыв и оценка будут доступны в личном кабинете.\",\n    });\n    \n    // Redirect based on user role\n    if (currentUser?.role === 'client') {\n      window.location.href = '/dashboard';\n    } else if (currentUser?.role === 'psychologist') {\n      window.location.href = '/dashboard';\n    }\n  };\n\n  if (!currentUser) {\n    return (\n      <div className=\"fixed inset-0 bg-gray-900 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-6 text-center text-white\">\n            <h2 className=\"text-xl font-semibold mb-4\">Доступ запрещен</h2>\n            <p className=\"text-gray-300\">\n              Для участия в консультации необходимо войти в систему\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"fixed inset-0 bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center text-white\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n          <p>Подключение к сессии...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!appointment) {\n    return (\n      <div className=\"fixed inset-0 bg-gray-900 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-6 text-center text-white\">\n            <h2 className=\"text-xl font-semibold mb-4\">Сессия не найдена</h2>\n            <p className=\"text-gray-300\">\n              Консультация не существует или была отменена\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const otherUser = currentUser.role === 'client' \n    ? appointment.psychologist.user \n    : appointment.client;\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-900\" data-testid=\"video-consultation\">\n      <div className=\"h-full flex flex-col\">\n        {/* Header */}\n        <div className=\"bg-gray-800 text-white p-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <h2 className=\"text-lg font-semibold\">\n              Консультация с {currentUser.role === 'client' ? 'Др. ' : ''}{otherUser.firstName} {otherUser.lastName}\n            </h2>\n            <Badge className=\"bg-red-600 text-white px-3 py-1 rounded-full text-sm\">\n              ● В эфире\n            </Badge>\n          </div>\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <Clock className=\"h-4 w-4\" />\n            <span data-testid=\"session-timer\">{formatSessionTime(sessionTime)}</span>\n          </div>\n        </div>\n\n        {/* Video Area */}\n        <div className=\"flex-1 relative bg-black\">\n          {/* Main video area (remote participant) */}\n          <div className=\"w-full h-full bg-gray-800 flex items-center justify-center\">\n            <div className=\"text-center text-white\">\n              <div className=\"bg-primary-custom rounded-full w-32 h-32 flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-4xl font-bold\">\n                  {otherUser.firstName[0]}{otherUser.lastName[0]}\n                </span>\n              </div>\n              <p className=\"text-xl font-medium\">\n                {currentUser.role === 'client' ? 'Др. ' : ''}{otherUser.firstName} {otherUser.lastName}\n              </p>\n              <p className=\"text-gray-400\">\n                {isVideoOff ? 'Видео отключено' : 'Видео включено'}\n              </p>\n            </div>\n          </div>\n\n          {/* Picture-in-picture (local participant) */}\n          <div className=\"absolute top-4 right-4 w-48 h-36 bg-gray-700 rounded-lg overflow-hidden border-2 border-white\">\n            <div className=\"w-full h-full bg-gray-600 flex items-center justify-center text-white\">\n              <div className=\"text-center\">\n                <div className=\"bg-gray-500 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-xl font-bold\">\n                    {currentUser.firstName[0]}{currentUser.lastName[0]}\n                  </span>\n                </div>\n                <p className=\"text-sm\">Вы</p>\n                {isAudioMuted && (\n                  <div className=\"absolute top-2 right-2 bg-red-600 rounded-full p-1\">\n                    <MicOff className=\"h-3 w-3\" />\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Panel */}\n          <div className={`absolute top-0 right-0 w-80 h-full bg-white shadow-xl transition-transform duration-300 ${\n            showChat ? 'translate-x-0' : 'translate-x-full'\n          }`} data-testid=\"chat-panel\">\n            <div className=\"h-full flex flex-col\">\n              <div className=\"p-4 border-b\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-semibold text-text-custom\">Чат</h3>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => setShowChat(false)}\n                    data-testid=\"button-close-chat\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"flex-1 p-4 overflow-y-auto\">\n                <div className=\"space-y-4\">\n                  {messages.map((message) => (\n                    <div \n                      key={message.id} \n                      className={`flex ${\n                        message.sender === currentUser.role ? 'justify-end' : 'justify-start'\n                      }`}\n                    >\n                      <div className={`max-w-xs rounded-lg p-3 ${\n                        message.sender === currentUser.role \n                          ? 'bg-primary-custom text-white' \n                          : 'bg-gray-100 text-text-custom'\n                      }`}>\n                        <p className=\"text-sm\">{message.text}</p>\n                        <span className=\"text-xs opacity-75\">{message.time}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"p-4 border-t\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    value={chatMessage}\n                    onChange={(e) => setChatMessage(e.target.value)}\n                    placeholder=\"Напишите сообщение...\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        handleSendMessage();\n                      }\n                    }}\n                    data-testid=\"input-chat-message\"\n                  />\n                  <Button \n                    onClick={handleSendMessage}\n                    className=\"bg-primary-custom text-white hover:bg-primary-custom/90\"\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Controls */}\n        <div className=\"bg-gray-800 p-6\">\n          <div className=\"flex items-center justify-center space-x-4\">\n            {/* Audio toggle */}\n            <Button\n              className={`p-4 rounded-full transition ${\n                isAudioMuted \n                  ? 'bg-red-600 hover:bg-red-700 text-white' \n                  : 'bg-gray-700 hover:bg-gray-600 text-white'\n              }`}\n              onClick={() => setIsAudioMuted(!isAudioMuted)}\n              data-testid=\"button-toggle-audio\"\n            >\n              {isAudioMuted ? <MicOff className=\"h-6 w-6\" /> : <Mic className=\"h-6 w-6\" />}\n            </Button>\n\n            {/* Video toggle */}\n            <Button\n              className={`p-4 rounded-full transition ${\n                isVideoOff \n                  ? 'bg-red-600 hover:bg-red-700 text-white' \n                  : 'bg-gray-700 hover:bg-gray-600 text-white'\n              }`}\n              onClick={() => setIsVideoOff(!isVideoOff)}\n              data-testid=\"button-toggle-video\"\n            >\n              {isVideoOff ? <VideoOff className=\"h-6 w-6\" /> : <Video className=\"h-6 w-6\" />}\n            </Button>\n\n            {/* Screen share */}\n            <Button\n              className={`p-4 rounded-full transition ${\n                isScreenSharing \n                  ? 'bg-blue-600 hover:bg-blue-700 text-white' \n                  : 'bg-gray-700 hover:bg-gray-600 text-white'\n              }`}\n              onClick={() => setIsScreenSharing(!isScreenSharing)}\n              data-testid=\"button-toggle-screen-share\"\n            >\n              <Monitor className=\"h-6 w-6\" />\n            </Button>\n\n            {/* Chat toggle */}\n            <Button\n              className=\"bg-gray-700 hover:bg-gray-600 text-white p-4 rounded-full transition\"\n              onClick={() => setShowChat(!showChat)}\n              data-testid=\"button-toggle-chat\"\n            >\n              <MessageSquare className=\"h-6 w-6\" />\n            </Button>\n\n            {/* End call */}\n            <Button\n              className=\"bg-red-600 hover:bg-red-700 text-white p-4 rounded-full transition\"\n              onClick={handleEndSession}\n              data-testid=\"button-end-session\"\n            >\n              <PhoneOff className=\"h-6 w-6\" />\n            </Button>\n          </div>\n\n          {/* Session info */}\n          <div className=\"text-center mt-4 text-gray-400 text-sm\">\n            <p>Защищенное соединение • Запись не ведется</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12532},"client/src/types/index.ts":{"content":"export interface AuthUser {\n  id: string;\n  email: string;\n  role: 'client' | 'psychologist' | 'admin';\n  firstName: string;\n  lastName: string;\n  avatar?: string;\n  isVerified: boolean;\n}\n\nexport interface SearchFilters {\n  specialization?: string;\n  minPrice?: number;\n  maxPrice?: number;\n  formats?: string[];\n}\n\nexport interface BookingData {\n  psychologistId: string;\n  dateTime: Date;\n  format: 'video' | 'audio' | 'chat';\n  notes?: string;\n}\n","size_bytes":450},"client/src/components/auth/login-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\ninterface LoginModalProps {\n  open: boolean;\n  onClose: () => void;\n  onShowRegister: () => void;\n}\n\nexport default function LoginModal({ open, onClose, onShowRegister }: LoginModalProps) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await authService.login(email, password);\n      toast({\n        title: \"Успешный вход\",\n        description: \"Добро пожаловать в PsychPlatform!\",\n      });\n      onClose();\n      setEmail(\"\");\n      setPassword(\"\");\n    } catch (error) {\n      toast({\n        title: \"Ошибка входа\",\n        description: error instanceof Error ? error.message : \"Проверьте email и пароль\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"login-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-center text-text-custom\">\n            Вход в систему\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"your@email.com\"\n              required\n              data-testid=\"input-email\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Пароль</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Введите пароль\"\n                required\n                data-testid=\"input-password\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowPassword(!showPassword)}\n                data-testid=\"toggle-password\"\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-primary-custom text-white hover:bg-primary-custom/90\"\n            disabled={isLoading}\n            data-testid=\"button-submit-login\"\n          >\n            {isLoading ? \"Вход...\" : \"Войти\"}\n          </Button>\n        </form>\n\n        <div className=\"text-center pt-4 border-t border-gray-200\">\n          <p className=\"text-sm text-gray-600 mb-4\">\n            Еще нет аккаунта?\n          </p>\n          <Button\n            variant=\"ghost\"\n            onClick={onShowRegister}\n            className=\"text-primary-custom hover:text-primary-custom/90\"\n            data-testid=\"link-show-register\"\n          >\n            Создать аккаунт\n          </Button>\n        </div>\n\n        {/* Demo credentials */}\n        <div className=\"bg-muted-custom p-4 rounded-lg text-sm\">\n          <p className=\"font-medium mb-2\">Демо-аккаунты:</p>\n          <p>Клиент: maria.ivanova@example.com / client123</p>\n          <p>Психолог: anna.petrova@psychplatform.com / psychologist123</p>\n          <p>Админ: admin@psychplatform.com / admin123</p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4513},"client/src/components/auth/register-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport { User, UserCog, Eye, EyeOff } from \"lucide-react\";\n\ninterface RegisterModalProps {\n  open: boolean;\n  onClose: () => void;\n  onShowLogin: () => void;\n}\n\nexport default function RegisterModal({ open, onClose, onShowLogin }: RegisterModalProps) {\n  const [step, setStep] = useState<'role' | 'form'>('role');\n  const [role, setRole] = useState<'client' | 'psychologist'>('client');\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleRoleSelect = (selectedRole: 'client' | 'psychologist') => {\n    setRole(selectedRole);\n    setStep('form');\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await authService.register({\n        ...formData,\n        role,\n      });\n      \n      toast({\n        title: \"Регистрация успешна\",\n        description: role === 'psychologist' \n          ? \"Ваш аккаунт создан. После проверки документов вы сможете принимать клиентов.\"\n          : \"Добро пожаловать в PsychPlatform!\",\n      });\n      \n      onClose();\n      resetForm();\n    } catch (error) {\n      toast({\n        title: \"Ошибка регистрации\",\n        description: error instanceof Error ? error.message : \"Попробуйте еще раз\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setStep('role');\n    setRole('client');\n    setFormData({ email: '', password: '', firstName: '', lastName: '' });\n    setShowPassword(false);\n  };\n\n  const handleClose = () => {\n    onClose();\n    resetForm();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"register-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-center text-text-custom\">\n            Создать аккаунт\n          </DialogTitle>\n        </DialogHeader>\n\n        {step === 'role' ? (\n          <div className=\"space-y-4\">\n            <p className=\"text-center text-gray-600 mb-6\">\n              Выберите тип аккаунта\n            </p>\n\n            <div className=\"space-y-3\">\n              <button\n                onClick={() => handleRoleSelect('client')}\n                className=\"w-full p-4 border-2 border-gray-200 rounded-xl hover:border-primary-custom hover:bg-blue-50 transition text-left\"\n                data-testid=\"role-client\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"bg-primary-custom text-white p-3 rounded-lg\">\n                    <User className=\"h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-text-custom\">Я клиент</p>\n                    <p className=\"text-sm text-gray-600\">Ищу психологическую помощь</p>\n                  </div>\n                </div>\n              </button>\n\n              <button\n                onClick={() => handleRoleSelect('psychologist')}\n                className=\"w-full p-4 border-2 border-gray-200 rounded-xl hover:border-secondary-custom hover:bg-green-50 transition text-left\"\n                data-testid=\"role-psychologist\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"bg-secondary-custom text-white p-3 rounded-lg\">\n                    <UserCog className=\"h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-text-custom\">Я психолог</p>\n                    <p className=\"text-sm text-gray-600\">Хочу оказывать помощь клиентам</p>\n                  </div>\n                </div>\n              </button>\n            </div>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600 mb-4\">Уже есть аккаунт?</p>\n              <Button\n                variant=\"ghost\"\n                onClick={onShowLogin}\n                className=\"text-primary-custom hover:text-primary-custom/90\"\n                data-testid=\"link-show-login\"\n              >\n                Войти в систему\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"text-center mb-4\">\n              <div className={`inline-flex items-center space-x-2 px-3 py-1 rounded-full text-sm ${\n                role === 'client' \n                  ? 'bg-blue-100 text-primary-custom' \n                  : 'bg-green-100 text-secondary-custom'\n              }`}>\n                {role === 'client' ? <User className=\"h-4 w-4\" /> : <UserCog className=\"h-4 w-4\" />}\n                <span>{role === 'client' ? 'Регистрация клиента' : 'Регистрация психолога'}</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">Имя</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n                  placeholder=\"Ваше имя\"\n                  required\n                  data-testid=\"input-firstName\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Фамилия</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n                  placeholder=\"Ваша фамилия\"\n                  required\n                  data-testid=\"input-lastName\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                placeholder=\"your@email.com\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Пароль</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={formData.password}\n                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                  placeholder=\"Минимум 6 символов\"\n                  minLength={6}\n                  required\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setStep('role')}\n                className=\"flex-1\"\n                data-testid=\"button-back\"\n              >\n                Назад\n              </Button>\n              <Button\n                type=\"submit\"\n                className={`flex-1 text-white ${\n                  role === 'client'\n                    ? 'bg-primary-custom hover:bg-primary-custom/90'\n                    : 'bg-secondary-custom hover:bg-secondary-custom/90'\n                }`}\n                disabled={isLoading}\n                data-testid=\"button-submit-register\"\n              >\n                {isLoading ? \"Регистрация...\" : \"Создать аккаунт\"}\n              </Button>\n            </div>\n          </form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9258},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-white dark:bg-gray-800 text-gray-900 dark:text-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3890},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-white dark:bg-gray-800 text-gray-900 dark:text-white p-1 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors hover:bg-gray-100 dark:hover:bg-gray-700 focus:bg-gray-100 dark:focus:bg-gray-700 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7667},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-white dark:bg-gray-800 text-gray-900 dark:text-white\",\n        destructive:\n          \"destructive group border-red-500 bg-white dark:bg-gray-800 text-red-700 dark:text-red-300\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4881},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/edit-profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Save } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { User, Psychologist } from \"@shared/schema\";\n\nexport default function EditProfile() {\n  const [, navigate] = useLocation();\n  const currentUser = authService.getCurrentUser();\n  const { toast } = useToast();\n  \n  // User form state\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  \n  // Psychologist form state\n  const [specialization, setSpecialization] = useState(\"\");\n  const [experience, setExperience] = useState(0);\n  const [education, setEducation] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [formats, setFormats] = useState<string[]>([]);\n  const [certifications, setCertifications] = useState(\"\");\n\n  const { data: user } = useQuery<User>({\n    queryKey: ['/api/auth/me'],\n    enabled: !!currentUser,\n  });\n\n  const { data: psychologist } = useQuery<Psychologist>({\n    queryKey: ['/api/psychologists/user', currentUser?.id],\n    enabled: !!currentUser && currentUser.role === 'psychologist',\n  });\n\n  // Populate forms when data loads\n  useEffect(() => {\n    if (user) {\n      setFirstName(user.firstName || \"\");\n      setLastName(user.lastName || \"\");\n      setEmail(user.email || \"\");\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (psychologist) {\n      setSpecialization(psychologist.specialization || \"\");\n      setExperience(psychologist.experience || 0);\n      setEducation(psychologist.education || \"\");\n      setDescription(psychologist.description || \"\");\n      setPrice(psychologist.price || \"\");\n      setFormats(psychologist.formats || []);\n      setCertifications((psychologist.certifications || []).join(\", \"));\n    }\n  }, [psychologist]);\n\n  const updateUserMutation = useMutation({\n    mutationFn: (data: any) => \n      apiRequest(`/api/users/${currentUser?.id}`, 'PUT', data),\n    onSuccess: () => {\n      toast({\n        title: \"Успешно\",\n        description: \"Профиль пользователя обновлен\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить профиль\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePsychologistMutation = useMutation({\n    mutationFn: (data: any) => \n      apiRequest(`/api/psychologists/${psychologist?.id}`, 'PUT', data),\n    onSuccess: () => {\n      toast({\n        title: \"Успешно\",\n        description: \"Профиль психолога обновлен\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/psychologists/user', currentUser?.id] });\n    },\n    onError: () => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить профиль психолога\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveUser = () => {\n    if (!firstName || !lastName || !email) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Заполните все обязательные поля\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateUserMutation.mutate({\n      firstName,\n      lastName,\n      email,\n    });\n  };\n\n  const handleSavePsychologist = () => {\n    if (!specialization || !education || !description || !price) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Заполните все обязательные поля\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updatePsychologistMutation.mutate({\n      specialization,\n      experience: Number(experience),\n      education,\n      description,\n      price,\n      formats,\n      certifications: certifications.split(\",\").map(cert => cert.trim()).filter(cert => cert),\n    });\n  };\n\n  const handleFormatChange = (format: string, checked: boolean) => {\n    if (checked) {\n      setFormats([...formats, format]);\n    } else {\n      setFormats(formats.filter(f => f !== format));\n    }\n  };\n\n  if (!currentUser) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-4\">Доступ запрещен</h2>\n            <p className=\"text-gray-600\">Пожалуйста, войдите в систему</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const navigateBack = () => {\n    if (currentUser.role === 'admin') {\n      navigate('/admin');\n    } else if (currentUser.role === 'psychologist') {\n      navigate('/dashboard');\n    } else {\n      navigate('/dashboard');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={navigateBack}\n            className=\"flex items-center gap-2\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Назад\n          </Button>\n          <h1 className=\"text-2xl font-bold\">Редактирование профиля</h1>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* User Profile Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Основная информация</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Имя</label>\n                  <Input \n                    value={firstName}\n                    onChange={(e) => setFirstName(e.target.value)}\n                    data-testid=\"input-first-name\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Фамилия</label>\n                  <Input \n                    value={lastName}\n                    onChange={(e) => setLastName(e.target.value)}\n                    data-testid=\"input-last-name\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Email</label>\n                <Input \n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <Button \n                onClick={handleSaveUser}\n                disabled={updateUserMutation.isPending}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-save-user\"\n              >\n                <Save className=\"h-4 w-4\" />\n                {updateUserMutation.isPending ? \"Сохранение...\" : \"Сохранить основную информацию\"}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Psychologist Profile Section */}\n          {currentUser.role === 'psychologist' && psychologist && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Профессиональная информация</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Специализация</label>\n                  <Select value={specialization} onValueChange={setSpecialization}>\n                    <SelectTrigger data-testid=\"select-specialization\">\n                      <SelectValue placeholder=\"Выберите специализацию\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Семейная терапия\">Семейная терапия</SelectItem>\n                      <SelectItem value=\"Когнитивно-поведенческая терапия\">Когнитивно-поведенческая терапия</SelectItem>\n                      <SelectItem value=\"Гештальт-терапия\">Гештальт-терапия</SelectItem>\n                      <SelectItem value=\"Психоанализ\">Психоанализ</SelectItem>\n                      <SelectItem value=\"Детская психология\">Детская психология</SelectItem>\n                      <SelectItem value=\"Нейропсихология\">Нейропсихология</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Опыт работы (лет)</label>\n                    <Input \n                      type=\"number\"\n                      value={experience}\n                      onChange={(e) => setExperience(Number(e.target.value))}\n                      data-testid=\"input-experience\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Стоимость консультации (руб)</label>\n                    <Input \n                      value={price}\n                      onChange={(e) => setPrice(e.target.value)}\n                      data-testid=\"input-price\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Образование</label>\n                  <Input \n                    value={education}\n                    onChange={(e) => setEducation(e.target.value)}\n                    data-testid=\"input-education\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Сертификаты (через запятую)</label>\n                  <Input \n                    value={certifications}\n                    onChange={(e) => setCertifications(e.target.value)}\n                    placeholder=\"Например: КПТ, Семейная терапия\"\n                    data-testid=\"input-certifications\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Описание</label>\n                  <Textarea \n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    rows={4}\n                    placeholder=\"Расскажите о своем подходе к работе, методах, опыте...\"\n                    data-testid=\"textarea-description\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Форматы консультаций</label>\n                  <div className=\"flex flex-wrap gap-4\">\n                    {['video', 'audio', 'chat'].map((format) => (\n                      <div key={format} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={format}\n                          checked={formats.includes(format)}\n                          onCheckedChange={(checked) => handleFormatChange(format, checked as boolean)}\n                          data-testid={`checkbox-format-${format}`}\n                        />\n                        <label htmlFor={format} className=\"capitalize\">\n                          {format === 'video' && 'Видео'}\n                          {format === 'audio' && 'Аудио'}\n                          {format === 'chat' && 'Чат'}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <Button \n                  onClick={handleSavePsychologist}\n                  disabled={updatePsychologistMutation.isPending}\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-save-psychologist\"\n                >\n                  <Save className=\"h-4 w-4\" />\n                  {updatePsychologistMutation.isPending ? \"Сохранение...\" : \"Сохранить профессиональную информацию\"}\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13454}}}